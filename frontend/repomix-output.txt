This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-02T21:08:47.817Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
__tests__/
  api/
    chat.test.ts
  components/
    AgentResponse.test.tsx
    ChatInterfaceClient.test.tsx
    LoadingSpinner.test.tsx
    MessageActions.test.tsx
  hooks/
    use-chat-scroll.test.tsx
    use-media-query.test.ts
    use-media-query.test.tsx
app/
  about/
    page.tsx
  account/
    page.tsx
  api/
    chat/
      route.ts
  chat/
    error.tsx
    layout.tsx
    loading.tsx
    page.tsx
  login/
    page.tsx
  chat-interface.tsx
  globals.css
  head.tsx
  layout.tsx
  loading.tsx
  not-found.tsx
  page.tsx
components/
  ui/
    avatar.tsx
    button.tsx
    context-menu.tsx
    dropdown-menu.tsx
    glass-card.tsx
    gradient-button.tsx
    input.tsx
    label.tsx
    loading-dots.tsx
    skeleton.tsx
    tooltip.tsx
    wavy-background.tsx
  AgentResponse.tsx
  BotAvatar.tsx
  ChatContainer.tsx
  ChatInterfaceClient.tsx
  ChatMessage.tsx
  ChatSkeleton.tsx
  ErrorBoundary.tsx
  LoadingSpinner.tsx
  MessageActions.tsx
  MessageContextMenu.tsx
  Navigation.tsx
  PageTransition.tsx
  ScrollToTop.tsx
cypress/
  e2e/
    chat.cy.js
    navigation.cy.js
  support/
    commands.js
    e2e.js
hooks/
  use-chat-scroll.ts
  use-chat-shortcuts.ts
  use-media-query.test.tsx
  use-media-query.ts
  use-scroll-direction.ts
lib/
  rate-limit.test.ts
  rate-limit.ts
  sanitize.ts
  utils.ts
src/
  utils/
    formatTime.ts
types/
  chat.ts
  jest.d.ts
  loading-spinner.ts
  lodash.d.ts
  media-query.d.ts
  media-query.ts
  radix.d.ts
  react-components.d.ts
utils/
  formatTime.ts
.dockerignore
.env.local
components.json
cypress.config.js
Dockerfile
jest.config.js
jest.setup.js
next-env.d.ts
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json
tsconfig.tsbuildinfo

================================================================
Repository Files
================================================================

================
File: __tests__/api/chat.test.ts
================
import { NextRequest } from 'next/server'
import { POST } from '@/app/api/chat/route'

// Mock Response if not available in test environment
if (typeof Response === 'undefined') {
  class MockResponse implements Response {
    private readonly response: Response;

    constructor(body?: BodyInit | null, init?: ResponseInit) {
      this.response = new Response(body || '', init);
    }

    // Implement Response interface methods by delegating to this.response
    get body() { return this.response.body }
    get bodyUsed() { return this.response.bodyUsed }
    get headers() { return this.response.headers }
    get ok() { return this.response.ok }
    get redirected() { return this.response.redirected }
    get status() { return this.response.status }
    get statusText() { return this.response.statusText }
    get type() { return this.response.type }
    get url() { return this.response.url }
    clone() { return this.response.clone() }
    async arrayBuffer() { return this.response.arrayBuffer() }
    async blob() { return this.response.blob() }
    async formData() { return this.response.formData() }
    async json() { return this.response.json() }
    async text() { return this.response.text() }

    static error() {
      return new Response(null, { status: 500 })
    }

    static json(data: unknown, init?: ResponseInit) {
      return new Response(JSON.stringify(data), {
        ...init,
        headers: { 'Content-Type': 'application/json' },
      })
    }

    static redirect(url: string | URL, status = 302) {
      return new Response(null, {
        status,
        headers: { Location: url.toString() },
      })
    }
  }

  global.Response = MockResponse as unknown as typeof Response
}

describe('Chat API', () => {
  it('handles valid requests', async () => {
    const req = new NextRequest('http://localhost:3000/api/chat', {
      method: 'POST',
      body: JSON.stringify({
        message: 'Test message',
        agent: 'General'
      })
    })

    const response = await POST(req)
    expect(response.status).toBe(200)

    const data = await response.json()
    expect(data.message).toBeDefined()
    expect(data.agentResponse).toBeDefined()
    expect(data.timestamp).toBeDefined()
  })

  it('handles invalid agent type', async () => {
    const req = new NextRequest('http://localhost:3000/api/chat', {
      method: 'POST',
      body: JSON.stringify({
        message: 'Test message',
        agent: 'Invalid'
      })
    })

    const response = await POST(req)
    expect(response.status).toBe(400)

    const data = await response.json()
    expect(data.error).toBe('Invalid agent type')
  })

  it('handles missing fields', async () => {
    const req = new NextRequest('http://localhost:3000/api/chat', {
      method: 'POST',
      body: JSON.stringify({})
    })

    const response = await POST(req)
    expect(response.status).toBe(400)

    const data = await response.json()
    expect(data.error).toBe('Missing required fields')
  })
})

================
File: __tests__/components/AgentResponse.test.tsx
================
import type { PropsWithChildren, HTMLAttributes } from 'react'
import { render, screen, fireEvent } from '@testing-library/react'
import { AgentResponse } from '@/components/AgentResponse'

// Mock framer-motion to avoid animation issues in tests
jest.mock('framer-motion', () => ({
  motion: {
    div: ({ children, ...props }: PropsWithChildren<HTMLAttributes<HTMLDivElement>>) => (
      <div {...props}>{children}</div>
    ),
  },
  AnimatePresence: ({ children }: PropsWithChildren) => <>{children}</>,
}))

describe('AgentResponse', () => {
  it('renders correctly for PFC agent', () => {
    render(<AgentResponse agent="PFC" response="Test PFC response" />)
    expect(screen.getByText('PFC Agent')).toBeInTheDocument()
    expect(screen.getByText('Test PFC response')).toBeInTheDocument()
  })

  it('renders correctly for General agent', () => {
    render(<AgentResponse agent="General" response="Test General response" />)
    expect(screen.getByText('General Agent')).toBeInTheDocument()
    expect(screen.getByText('Test General response')).toBeInTheDocument()
  })

  it('toggles response visibility on click', () => {
    render(<AgentResponse agent="PFC" response="Test PFC response" />)
    const button = screen.getByRole('button')

    // Response starts visible
    expect(screen.getByText('Test PFC response')).toBeInTheDocument()

    // First click hides it
    fireEvent.click(button)
    expect(screen.queryByText('Test PFC response')).not.toBeInTheDocument()

    // Second click shows it
    fireEvent.click(button)
    expect(screen.getByText('Test PFC response')).toBeInTheDocument()
  })

  it('uses correct icons for each agent type', () => {
    const { rerender } = render(<AgentResponse agent="PFC" response="Test PFC response" />)
    expect(screen.getByLabelText('PFC Agent')).toBeInTheDocument()

    rerender(<AgentResponse agent="General" response="Test General response" />)
    expect(screen.getByLabelText('General Agent')).toBeInTheDocument()
  })

  it('applies correct styling', () => {
    render(<AgentResponse agent="PFC" response="Test response" />)
    const responseContainer = screen.getByText('Test response').closest('.glass-effect')
    expect(responseContainer).toHaveClass('glass-effect', 'rounded-b-lg')
  })
})

================
File: __tests__/components/ChatInterfaceClient.test.tsx
================
import type { PropsWithChildren, HTMLAttributes } from 'react'
import { render, screen, fireEvent, act, waitFor } from '@testing-library/react'
import { ChatInterfaceClient } from '@/components/ChatInterfaceClient'

// Mock scrollIntoView
window.HTMLElement.prototype.scrollIntoView = jest.fn()

// Mock framer-motion
jest.mock('framer-motion', () => ({
  motion: {
    div: ({ children, ...props }: PropsWithChildren<HTMLAttributes<HTMLDivElement>>) => (
      <div {...props}>{children}</div>
    ),
  },
  AnimatePresence: ({ children }: PropsWithChildren) => <>{children}</>,
}))

// Mock fetch
type MockResponse = {
  ok: boolean;
  status: number;
  json: () => Promise<{
    message: string;
    agentResponse: string;
    timestamp: string;
  }>;
}

const mockFetch = jest.fn(() =>
  Promise.resolve({
    ok: true,
    status: 200,
    json: () => Promise.resolve({
      message: 'Test response',
      agentResponse: 'Test agent response',
      timestamp: new Date().toISOString(),
    }),
  } as MockResponse)
)
global.fetch = mockFetch as unknown as typeof fetch

describe('ChatInterfaceClient', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  it('renders correctly', () => {
    render(<ChatInterfaceClient />)
    expect(screen.getByTestId('chat-interface')).toBeInTheDocument()
    expect(screen.getByPlaceholderText(/Message .* agent/i)).toBeInTheDocument()
  })

  it('handles input changes', () => {
    render(<ChatInterfaceClient />)
    const input = screen.getByPlaceholderText(/Message .* agent/i)
    fireEvent.change(input, { target: { value: 'test message' } })
    expect(input).toHaveValue('test message')
  })

  it('handles message submission', async () => {
    render(<ChatInterfaceClient />);
    const input = screen.getByPlaceholderText(/Message .* agent/i);
    const form = screen.getByRole('form');

    fireEvent.change(input, { target: { value: 'test message' } });
    await act(async () => {
      fireEvent.submit(form);
    });

    await waitFor(() => {
      expect(mockFetch).toHaveBeenCalledTimes(1);
      expect(input).toHaveValue('');
    });
  })

  it('shows error for empty message', async () => {
    render(<ChatInterfaceClient />)
    const form = screen.getByRole('form')

    await act(async () => {
      fireEvent.submit(form)
    })

    expect(screen.getByText('Please enter a message')).toBeInTheDocument()
  })

  it('shows loading state', async () => {
    render(<ChatInterfaceClient />);
    const input = screen.getByPlaceholderText(/Message .* agent/i);
    const form = screen.getByRole('form');

    fireEvent.change(input, { target: { value: 'test message' } });
    fireEvent.submit(form);

    expect(screen.getByRole('status')).toBeInTheDocument();
  })

  it('handles API errors', async () => {
    mockFetch.mockImplementationOnce(() => Promise.reject(new Error('API Error')));

    render(<ChatInterfaceClient />);
    const input = screen.getByPlaceholderText(/Message .* agent/i);
    const form = screen.getByRole('form');

    fireEvent.change(input, { target: { value: 'test message' } });
    await act(async () => {
      fireEvent.submit(form);
    });

    expect(screen.getByText('Failed to send message. Please try again.')).toBeInTheDocument();
  })

  it('switches agent types', () => {
    render(<ChatInterfaceClient />);
    fireEvent.click(screen.getByText('PFC'));
    expect(screen.getByPlaceholderText(/Message PFC agent/i)).toBeInTheDocument();
    fireEvent.click(screen.getByText('General'));
    expect(screen.getByPlaceholderText(/Message General agent/i)).toBeInTheDocument();
  });
})

================
File: __tests__/components/LoadingSpinner.test.tsx
================
import { render, screen } from '@testing-library/react';
import { LoadingSpinner } from '@/components/LoadingSpinner';

describe('LoadingSpinner', () => {
  it('renders with default size', () => {
    render(<LoadingSpinner />);
    const spinner = screen.getByRole('status');
    expect(spinner).toBeInTheDocument();
    expect(spinner).toHaveStyle({ width: '24px', height: '24px' });
  });

  it('renders with custom size', () => {
    render(<LoadingSpinner size={40} />);
    const spinner = screen.getByRole('status');
    expect(spinner).toHaveStyle({ width: '40px', height: '40px' });
  });
});

================
File: __tests__/components/MessageActions.test.tsx
================
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { MessageActions } from '@/components/MessageActions';

describe('MessageActions', () => {
  const message = {
    id: '1',
    content: 'Test message',
    isUser: true,
    timestamp: new Date().toISOString(),
  };

  it('renders the component correctly', () => {
    render(<MessageActions message={message} />);
    expect(screen.getByLabelText('Positive feedback')).toBeInTheDocument();
    expect(screen.getByLabelText('Negative feedback')).toBeInTheDocument();
  });

  it('triggers positive feedback action', () => {
    render(<MessageActions message={message} />);
    fireEvent.click(screen.getByLabelText('Positive feedback'));
    // Assert the expected behavior or state changes
  });

  it('triggers negative feedback action', () => {
    render(<MessageActions message={message} />);
    fireEvent.click(screen.getByLabelText('Negative feedback'));
    // Assert the expected behavior or state changes
  });

  it('calls onDelete when delete button is clicked', () => {
    const onDeleteMock = jest.fn();
    render(<MessageActions message={message} onDelete={onDeleteMock} />);
    fireEvent.click(screen.getByLabelText('Delete message'));
    expect(onDeleteMock).toHaveBeenCalledWith(message.id);
  });

  it('does not render delete button when onDelete is not provided', () => {
    render(<MessageActions message={message} />);
    expect(screen.queryByLabelText('Delete message')).not.toBeInTheDocument();
  });
});

================
File: __tests__/hooks/use-chat-scroll.test.tsx
================
import { renderHook } from '@testing-library/react-hooks';
import { useChatScroll } from '../../hooks/use-chat-scroll';

describe('useChatScroll', () => {
  it('scrolls to the bottom when new messages are added', () => {
    const { result, rerender } = renderHook(() => useChatScroll({ messages: [] }));
    const scrollRef = result.current.scrollRef;
    Object.defineProperty(scrollRef, 'current', {
      value: {
        scrollTop: 0,
        scrollHeight: 100,
        clientHeight: 50,
      },
      writable: true
    });

    rerender({ messages: [{ id: '1', content: 'New message' }] });

    expect(scrollRef.current?.scrollTop).toBe(50);
  });

  it('does not scroll when shouldAutoScroll is false', () => {
    const { result, rerender } = renderHook(() => useChatScroll({ messages: [], shouldAutoScroll: false }));

    const scrollRef = result.current.scrollRef;
    Object.defineProperty(scrollRef, 'current', {
      value: {
        scrollTop: 0,
        scrollHeight: 100,
        clientHeight: 50,
      },
      writable: true
    });

    rerender({ messages: [{ id: '1', content: 'New message' }] });

    expect(scrollRef.current?.scrollTop).toBe(0);
  });
});

================
File: __tests__/hooks/use-media-query.test.ts
================
import { renderHook } from '@testing-library/react'
import { useMediaQuery } from '@/hooks/use-media-query'
import type { MediaQueryList, MediaQueryListEvent } from '@/types/media-query'

describe('useMediaQuery', () => {
  let matchMediaMock: jest.SpyInstance

  beforeAll(() => {
    matchMediaMock = jest.spyOn(window, 'matchMedia')
  })

  afterEach(() => {
    matchMediaMock.mockReset()
  })

  afterAll(() => {
    matchMediaMock.mockRestore()
  })

  it('should return initial matches value', () => {
    const mockMediaQueryList = {
      matches: true,
      media: '(min-width: 768px)',
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      onchange: null,
      dispatchEvent: jest.fn(),
      addListener: jest.fn(),
      removeListener: jest.fn(),
    } as MediaQueryList

    matchMediaMock.mockImplementation(() => mockMediaQueryList)

    const { result } = renderHook(() => useMediaQuery('(min-width: 768px)'))
    expect(result.current).toBe(true)
  })

  it('should handle media query changes', () => {
    let changeListener: EventListener = jest.fn()
    const mockMediaQueryList = {
      matches: false,
      media: '(min-width: 768px)',
      addEventListener: (_: string, cb: EventListener) => { changeListener = cb },
      removeEventListener: jest.fn(),
      onchange: null,
      dispatchEvent: jest.fn(),
      addListener: jest.fn(),
      removeListener: jest.fn(),
    } as MediaQueryList

    matchMediaMock.mockImplementation(() => mockMediaQueryList)

    const { result } = renderHook(() => useMediaQuery('(min-width: 768px)'))
    expect(result.current).toBe(false)

    const event = new Event('change') as MediaQueryListEvent
    Object.defineProperty(event, 'matches', { value: true })
    Object.defineProperty(event, 'media', { value: '(min-width: 768px)' })

    changeListener(event)
    expect(result.current).toBe(true)
  })

  it('should handle SSR', () => {
    const windowSpy = jest.spyOn(global, 'window', 'get')
    windowSpy.mockImplementation(() => undefined as unknown as Window & typeof globalThis)

    const { result } = renderHook(() => useMediaQuery('(min-width: 768px)'))
    expect(result.current).toBe(false)

    windowSpy.mockRestore()
  })
})

================
File: __tests__/hooks/use-media-query.test.tsx
================
import { renderHook } from '@testing-library/react-hooks'
import { useMediaQuery } from '../../hooks/use-media-query'

describe('useMediaQuery', () => {
  let matchMedia: jest.SpyInstance

  beforeAll(() => {
    matchMedia = jest.spyOn(window, 'matchMedia')
  })

  afterEach(() => {
    matchMedia.mockReset()
  })

  afterAll(() => {
    matchMedia.mockRestore()
  })

  it('returns true when media query matches', () => {
    matchMedia.mockImplementation(query => ({
      matches: true,
      media: query,
      onchange: null,
      addListener: jest.fn(),
      removeListener: jest.fn(),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn(),
    }))

    const { result } = renderHook(() => useMediaQuery('(min-width: 768px)'))
    expect(result.current).toBe(true)
  })

  it('returns false when media query does not match', () => {
    matchMedia.mockImplementation(query => ({
      matches: false,
      media: query,
      onchange: null,
      addListener: jest.fn(),
      removeListener: jest.fn(),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn(),
    }))

    const { result } = renderHook(() => useMediaQuery('(min-width: 600px)'))
    expect(result.current).toBe(false)
  })

  it('handles different media queries', () => {
    matchMedia.mockImplementation(query => ({
      matches: query === '(min-width: 800px)',
      media: query,
      onchange: null,
      addListener: jest.fn(),
      removeListener: jest.fn(),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn(),
    }))

    const { result: result1 } = renderHook(() => useMediaQuery('(min-width: 800px)'))
    expect(result1.current).toBe(true)

    const { result: result2 } = renderHook(() => useMediaQuery('(min-width: 1200px)'))
    expect(result2.current).toBe(false)
  })
})

================
File: app/about/page.tsx
================
export default function About() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-24">
      <h1 className="text-4xl font-bold mb-8 bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent">
        About SCANUEV
      </h1>
      <p className="text-xl mb-8 text-center max-w-2xl">
        SCANUEV is an advanced conversational AI platform that allows users to interact with different types of AI agents. Our platform leverages cutting-edge natural language processing technologies to provide intelligent and context-aware responses.
      </p>
      <h2 className="text-2xl font-semibold mt-8 mb-4">Key Features:</h2>
      <ul className="list-disc list-inside text-lg">
        <li>Multiple AI agent types (PFC and General)</li>
        <li>Real-time conversation with AI</li>
        <li>Dark mode for comfortable viewing</li>
        <li>Emoji support for expressive communication</li>
        <li>Feedback system for continuous improvement</li>
      </ul>
    </main>
  )
}

================
File: app/account/page.tsx
================
'use client'

import { GradientButton } from "@/components/ui/gradient-button"
import { User } from "lucide-react"
import { WavyBackground } from "@/components/ui/wavy-background"

export default function AccountPage() {
  return (
    <WavyBackground
      className="relative"
      colors={['#c084fc', '#38bdf8', '#818cf8']}
      waveOpacity={0.25}
      blur={12}
    >
      <main className="flex-1 flex flex-col items-center justify-center p-4 sm:p-8">
        <div className="w-full max-w-2xl p-8 space-y-8 text-center bg-white/80 shadow-xl backdrop-blur-sm rounded-3xl sm:p-12">
          <div className="flex justify-center">
            <div className="flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-br from-blue-500 to-purple-600">
              <User className="w-12 h-12 text-white" />
            </div>
          </div>
          <h1 className="text-4xl font-bold text-transparent sm:text-5xl bg-gradient-to-br from-blue-500 to-purple-600 bg-clip-text">
            Your Account
          </h1>
          <p className="text-xl text-gray-700 dark:text-gray-300">
            Manage your SCANUEV account settings and preferences
          </p>

          <div className="flex justify-center gap-4">
            <GradientButton>
              Update Profile
            </GradientButton>
            <GradientButton className="bg-gradient-to-br from-red-500 to-red-600 hover:from-red-600 hover:to-red-700">
              Sign Out
            </GradientButton>
          </div>
        </div>
      </main>
    </WavyBackground>
  )
}

================
File: app/api/chat/route.ts
================
export const runtime = 'edge'
export const revalidate = 0

import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { rateLimit, RATE_LIMIT } from '@/lib/rate-limit'
import { sanitizeInput } from '@/lib/sanitize'

export const maxDuration = 5 // 5 seconds timeout

interface ChatRequestBody {
  message: string;
  agent: string;
}

export async function POST(request: NextRequest) {
  try {
    // Check content type
    const contentType = request.headers.get('content-type')
    if (!contentType?.includes('application/json')) {
      return NextResponse.json(
        { error: 'Content-Type must be application/json' },
        { status: 415 }
      )
    }

    // Rate limiting
    const rateLimitResult = await rateLimit(request)
    if (!rateLimitResult.success) {
      return NextResponse.json(
        { error: 'Rate limit exceeded' },
        { status: 429 }
      )
    }

    let body: ChatRequestBody
    try {
      body = await request.json()
    } catch (e) {
      return NextResponse.json(
        { error: 'Invalid JSON payload' },
        { status: 400 }
      )
    }
    const { message, agent } = body

    if (typeof message !== 'string' || typeof agent !== 'string') {
      return NextResponse.json(
        { error: 'Invalid field types' },
        { status: 400 }
      )
    }

    // Sanitize inputs
    const sanitizedMessage = sanitizeInput(message)

    if (!message || !agent) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    if (sanitizedMessage.length === 0) {
      return NextResponse.json(
        { error: 'Invalid message format or length' },
        { status: 400 }
      )
    }

    if (!['General', 'PFC'].includes(agent)) {
      return NextResponse.json(
        { error: 'Invalid agent type' },
        { status: 400 }
      )
    }

    const headers = new Headers({
      'X-RateLimit-Limit': RATE_LIMIT.toString(),
      'X-RateLimit-Remaining': rateLimitResult.remaining.toString()
    })

    const mockResponse = {
      message: `${agent} agent response: ${sanitizedMessage}`,
      agentResponse: `This is a detailed analysis from the ${agent} agent regarding: "${sanitizedMessage}"`,
      timestamp: new Date().toISOString()
    }

    return NextResponse.json(mockResponse, {
      headers: {
        ...headers,
        'Cache-Control': 'no-store',
        'Content-Security-Policy': "default-src 'self'; script-src 'self'",
        'X-Content-Type-Options': 'nosniff',
        'X-Frame-Options': 'DENY',
        'Referrer-Policy': 'no-referrer'
      }
    })
  } catch (error) {
    console.error('Error processing chat request:', error)
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    return NextResponse.json(
      { error: `Failed to process request: ${errorMessage}` },
      { status: 500 }
    )
  }
}

================
File: app/chat/error.tsx
================
'use client'

import { useEffect } from 'react'
import { AlertCircle } from 'lucide-react'

export default function ChatError({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    console.error(error)
  }, [error])

  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4">
      <div className="flex items-center space-x-2 text-red-600">
        <AlertCircle className="w-6 h-6" />
        <h2 className="text-lg font-semibold">Something went wrong!</h2>
      </div>
      <button
        type="button"
        onClick={reset}
        className="px-4 py-2 mt-4 text-white rounded-md bg-gradient-to-r from-blue-500 to-purple-600"
      >
        Try again
      </button>
    </div>
  )
}

================
File: app/chat/layout.tsx
================
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Chat - SCANUEV',
  description: 'Chat with our AI agents',
  openGraph: {
    title: 'Chat - SCANUEV',
    description: 'Chat with our AI agents',
    type: 'website',
  },
  robots: {
    index: true,
    follow: true,
  },
}

export default function ChatLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <main className="h-screen overflow-hidden">
      {children}
    </main>
  )
}

================
File: app/chat/loading.tsx
================
import { Bot } from 'lucide-react'

export default function Loading() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <Bot className="w-12 h-12 mb-4 text-blue-500 animate-bounce" />
      <p className="text-lg text-gray-600">Loading chat interface...</p>
    </div>
  )
}

================
File: app/chat/page.tsx
================
export const dynamic = 'force-dynamic'
export const runtime = 'edge'

import { ChatInterfaceClient } from '@/components/ChatInterfaceClient'

export default function ChatPage() {
  return <ChatInterfaceClient />
}

================
File: app/login/page.tsx
================
'use client'

import { useState } from 'react'
import { User, Lock, ArrowRight } from 'lucide-react'
import Link from 'next/link'
import { Input } from "@/components/ui/input"
import { GradientButton } from "@/components/ui/gradient-button"
import { WavyBackground } from "@/components/ui/wavy-background"

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Here you would typically handle the login logic
    console.log('Login attempt with:', { email, password })
  }

  return (
    <WavyBackground
      className="relative"
      colors={['#818cf8', '#c084fc', '#38bdf8']}
      waveOpacity={0.2}
      blur={8}
      speed="slow"
    >
      <main className="flex-1 flex flex-col items-center justify-center p-4 sm:p-8">
        <div className="w-full max-w-md p-8 space-y-8 text-center bg-white/80 shadow-xl backdrop-blur-sm rounded-3xl sm:p-12">
          <h1 className="text-4xl font-bold text-transparent sm:text-5xl bg-gradient-to-br from-blue-500 to-purple-600 bg-clip-text">
            Login
          </h1>
          <p className="text-xl text-gray-700 dark:text-gray-300">
            Sign in to access your SCANUEV account
          </p>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="relative">
              <Input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="pl-10 rounded-full"
                required
              />
              <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-500" size={18} />
            </div>
            <div className="relative">
              <Input
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="pl-10 rounded-full"
                required
              />
              <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-500" size={18} />
            </div>
            <GradientButton type="submit">
              <span className="flex items-center justify-center">
                Sign In
                <ArrowRight className="ml-2 h-5 w-5" />
              </span>
            </GradientButton>
          </form>
          <div className="mt-6 text-center">
            <Link
              href="/signup"
              className="text-transparent bg-gradient-to-br from-blue-500 to-purple-600 bg-clip-text hover:from-blue-600 hover:to-purple-700"
            >
              Don't have an account? Sign up
            </Link>
          </div>
        </div>
      </main>
    </WavyBackground>
  )
}

================
File: app/chat-interface.tsx
================
'use client'

import { ChatInterfaceClient } from '@/components/ChatInterfaceClient'

export default function ChatInterface() {
  return <ChatInterfaceClient />
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;

    --gradient-start: 221, 214, 254;  /* light purple */
    --gradient-end: 191, 219, 254;    /* light blue */
    --text-dark: 31, 41, 55;          /* dark gray for main text */
    --text-light: 255, 255, 255;      /* white for text on dark backgrounds */
    --text-muted: 107, 114, 128;      /* muted gray for secondary text */

    --page-enter-duration: 300ms;
    --content-enter-duration: 500ms;
    --content-enter-delay: 200ms;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    margin: 0;
    box-sizing: border-box;
    font-family: 'Inter', sans-serif;
    padding-top: 4rem; /* Default for desktop */
  }
}

@layer utilities {
  .gradient-bg {
    @apply bg-gradient-to-br from-blue-500 to-purple-600;
  }
  .gradient-text {
    @apply text-transparent bg-gradient-to-br from-blue-500 to-purple-600 bg-clip-text;
  }
  .glass-effect {
    @apply bg-white bg-opacity-80 backdrop-filter backdrop-blur-lg;
  }
  .interactive-transition {
    @apply transition-all duration-200 ease-in-out;
  }
  .nav-icon-transition {
    @apply transition-all duration-300 ease-in-out;
  }
  .nav-hover-effect {
    @apply hover:scale-110 hover:text-blue-500 dark:hover:text-blue-400 transform-gpu;
  }
  .nav-active {
    @apply gradient-bg text-white shadow-md;
  }
  .nav-item-base {
    @apply flex flex-col items-center justify-center p-2 rounded-lg;
    @apply transition-all duration-300 ease-in-out;
  }
  .glass-morphism {
    @apply bg-white/70 dark:bg-gray-900/70;
    @apply backdrop-blur-md backdrop-saturate-[1.5];
    @apply border border-white/10 dark:border-gray-800/10;
    @apply shadow-sm shadow-black/5 dark:shadow-white/5;
    @apply transition-all duration-200;
  }
  .glass-morphism-heavy {
    @apply bg-white/80 dark:bg-gray-900/80;
    @apply backdrop-blur-xl backdrop-saturate-[1.8];
    @apply border border-white/20 dark:border-gray-800/20;
    @apply shadow-lg shadow-black/10 dark:shadow-white/10;
    @apply transition-all duration-200;
  }
  .chat-container-width {
    @apply w-full max-w-3xl xl:max-w-4xl 2xl:max-w-5xl mx-auto;
  }
  .chat-message-padding {
    @apply px-3 py-3 sm:px-4 sm:py-4 md:px-6 md:py-5;
  }
  .chat-text-size {
    @apply text-sm sm:text-base md:text-base;
  }
}

/* Global interactive elements */
button, a, input {
  @apply transition-all duration-200 ease-in-out;
}

.gradient-border-hover {
  @apply border-2 border-transparent hover:border-blue-500 transition-all duration-200;
}

.gradient-focus {
  @apply focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 focus:outline-none;
}

/* Add responsive nav styles */
@media (max-width: 640px) {
  body {
    padding-top: 3.5rem; /* Smaller padding for mobile */
  }

  .nav-label {
    font-size: 0.75rem;
  }

  .nav-icon {
    width: 1.25rem;
    height: 1.25rem;
  }
}

/* Navigation styles */
@layer components {
  .nav-container {
    @apply fixed top-0 left-0 right-0 z-50 bg-background border-b shadow-sm;
    @apply transition-transform duration-300 ease-in-out;
  }

  .nav-item {
    @apply flex flex-col items-center gap-1 p-2 rounded-lg transition-colors;
    @apply hover:bg-accent hover:shadow-md;
  }

  .page-enter {
    animation: fadeIn var(--page-enter-duration) cubic-bezier(0.25, 0.1, 0.25, 1.0) forwards;
    will-change: opacity, transform;
  }

  .content-enter {
    animation: slideUp var(--content-enter-duration) cubic-bezier(0.25, 0.1, 0.25, 1.0) forwards;
    animation-delay: var(--content-enter-delay);
    opacity: 0;
    will-change: opacity, transform;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
    transform: none;
  }
}

@keyframes slideUp {
  from {
    transform: translateY(10px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@media (hover: none) {
  .touch-device\:opacity-100 {
    opacity: 1 !important;
  }
}

================
File: app/head.tsx
================
export default function Head() {
  return (
    <>
      <title>SCANUEV Chat</title>
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="preload" href="/fonts/inter-var.woff2" as="font" type="font/woff2" crossOrigin="anonymous" />
      <link rel="preconnect" href="https://fonts.googleapis.com" />
      <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
    </>
  )
}

================
File: app/layout.tsx
================
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { Navigation } from '@/components/Navigation'
import { PageTransition } from '@/components/PageTransition'
import { Suspense } from 'react'
import Loading from './loading'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  preload: true,
})

export const metadata: Metadata = {
  title: 'SCANUEV - Advanced Conversational AI Platform',
  description: 'SCANUEV is an advanced conversational AI platform that allows users to interact with different types of AI agents.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className="light" suppressHydrationWarning>
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="theme-color" content="#ffffff" />
      </head>
      <body className={`${inter.className} min-h-screen bg-background text-foreground antialiased`}>
        <Navigation />
        <Suspense fallback={<Loading />}>
          <PageTransition>
            {children}
          </PageTransition>
        </Suspense>
      </body>
    </html>
  )
}

================
File: app/loading.tsx
================
import { Skeleton } from "@/components/ui/skeleton"

export default function Loading() {
  const widths = [100, 90, 80] as const

  return (
    <output className="page-enter w-full max-w-4xl mx-auto p-4 space-y-4" aria-label="Loading content" aria-busy="true">
      <Skeleton className="h-8 w-[200px]" aria-hidden="true" />
      <Skeleton className="h-32 w-full" aria-hidden="true" />
      <div className="space-y-2">
        {widths.map((width, i) => (
          <Skeleton
            key={`skeleton-${width}`}
            style={{ width: `${width}%` }}
            className="h-4"
            aria-hidden="true"
          />
        ))}
      </div>
      <div className="sr-only">Loading page content...</div>
    </output>
  )
}

================
File: app/not-found.tsx
================
import Link from 'next/link'
import { GradientButton } from '@/components/ui/gradient-button'

export default function NotFound() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4">
      <h2 className="mb-4 text-4xl font-bold text-transparent bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text">
        404 - Page Not Found
      </h2>
      <p className="mb-8 text-xl text-gray-600">
        The page you're looking for doesn't exist.
      </p>
      <Link href="/">
        <GradientButton>
          Return Home
        </GradientButton>
      </Link>
    </div>
  )
}

================
File: app/page.tsx
================
import Link from 'next/link'
import { Bot, ArrowRight } from 'lucide-react'
import { GradientButton } from '@/components/ui/gradient-button'
import { WavyBackground } from "@/components/ui/wavy-background"

export default function Home() {
  return (
    <WavyBackground
      className="relative"
      colors={['#38bdf8', '#818cf8', '#c084fc']}
      waveOpacity={0.3}
      blur={10}
    >
      <main className="flex-1 flex flex-col items-center justify-center p-4 sm:p-8">
        <div className="w-full max-w-2xl p-8 space-y-8 text-center bg-white/80 shadow-xl backdrop-blur-sm rounded-3xl sm:p-12">
          <div className="flex justify-center">
            <div className="flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-br from-blue-500 to-purple-600">
              <Bot className="w-12 h-12 text-white" />
            </div>
          </div>
          <h1 className="text-4xl font-bold text-transparent sm:text-5xl bg-gradient-to-br from-blue-500 to-purple-600 bg-clip-text">
            Welcome to SCANUEV
          </h1>
          <p className="text-xl text-gray-700 dark:text-gray-300">
            Experience the power of AI with SCANUEV, our advanced chat interface. Choose between different agent types and get the assistance you need.
          </p>
          <div className="flex justify-center w-full">
            <Link href="/chat" passHref>
              <GradientButton className="flex items-center justify-center">
                Start Chatting
                <ArrowRight className="ml-2" />
              </GradientButton>
            </Link>
          </div>
        </div>
      </main>
    </WavyBackground>
  )
}

================
File: components/ui/avatar.tsx
================
'use client'

import * as React from 'react'
import * as AvatarPrimitive from '@radix-ui/react-avatar'
import { cn } from '@/lib/utils'

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex shrink-0 overflow-hidden rounded-full',
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn('aspect-square h-full w-full', className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      'flex h-full w-full items-center justify-center rounded-full bg-muted',
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/button.tsx
================
'use client'

import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cn } from '@/lib/utils'

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  asChild?: boolean
  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link' | 'gradient'
  size?: 'default' | 'sm' | 'lg' | 'icon'
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'default', size = 'default', asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(
          'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
          {
            'bg-primary text-primary-foreground hover:bg-primary/90': variant === 'default',
            'bg-destructive text-destructive-foreground hover:bg-destructive/90': variant === 'destructive',
            'border border-input bg-background hover:bg-accent hover:text-accent-foreground': variant === 'outline',
            'bg-secondary text-secondary-foreground hover:bg-secondary/80': variant === 'secondary',
            'hover:bg-accent hover:text-accent-foreground': variant === 'ghost',
            'text-primary underline-offset-4 hover:underline': variant === 'link',
            'bg-gradient-to-r from-purple-500 via-purple-600 to-purple-700 text-white hover:from-purple-600 hover:via-purple-700 hover:to-purple-800': variant === 'gradient',
            'h-10 px-4 py-2': size === 'default',
            'h-8 sm:h-9 rounded-md px-2 sm:px-3': size === 'sm',
            'h-11 rounded-md px-8': size === 'lg',
            'h-8 w-8 sm:h-10 sm:w-10 p-0': size === 'icon',
          },
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button }

================
File: components/ui/context-menu.tsx
================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root
const ContextMenuTrigger = ContextMenuPrimitive.Trigger
const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

export { ContextMenu, ContextMenuTrigger, ContextMenuContent, ContextMenuItem }

================
File: components/ui/dropdown-menu.tsx
================
'use client'

import * as React from 'react'
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'
import { cn } from '@/lib/utils'

const DropdownMenu = DropdownMenuPrimitive.Root
const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Content
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] rounded-md border bg-popover p-1 text-popover-foreground shadow-md',
      className
    )}
    {...props}
  />
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

export { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem }

================
File: components/ui/glass-card.tsx
================
import { cn } from "@/lib/utils"

interface GlassCardProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode
  className?: string
}

export function GlassCard({ children, className, ...props }: GlassCardProps) {
  return (
    <div
      className={cn(
        "w-full p-8 space-y-8 text-center rounded-3xl glass-card",
        className
      )}
      {...props}
    >
      {children}
    </div>
  )
}

================
File: components/ui/gradient-button.tsx
================
import { forwardRef } from "react"
import type { ButtonHTMLAttributes } from "react"
import { cn } from "@/lib/utils"
import { Slot } from "@radix-ui/react-slot"

export interface GradientButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  asChild?: boolean;
  className?: string;
}

const GradientButton = forwardRef<HTMLButtonElement, GradientButtonProps>(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(
          "inline-flex items-center justify-center px-6 py-3 text-base font-medium text-white transition-all duration-200 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 shadow-md hover:shadow-lg",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
GradientButton.displayName = "GradientButton"

export { GradientButton }

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:border-blue-500 disabled:cursor-not-allowed disabled:opacity-50 transition-colors duration-200",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/loading-dots.tsx
================
'use client'

import { motion } from 'framer-motion'
import { cn } from '@/lib/utils'

interface LoadingDotsProps {
  className?: string
  color?: string
}

export function LoadingDots({ className, color = 'currentColor' }: LoadingDotsProps) {
  return (
    <span className={cn('inline-flex items-center gap-1', className)}>
      {[0, 1, 2].map((dot) => (
        <motion.span
          key={dot}
          className={cn('h-2 w-2 rounded-full', color)}
          initial={{ scale: 0.5, opacity: 0.5 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.5, opacity: 0.5 }}
          transition={{
            duration: 0.5,
            repeat: Number.POSITIVE_INFINITY,
            repeatType: 'reverse',
            delay: dot * 0.2,
          }}
        />
      ))}
    </span>
  )
}

================
File: components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

interface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {}

export function Skeleton({ className, ...props }: SkeletonProps) {
  return (
    <div
      className={cn(
        "animate-pulse rounded-md bg-muted/50",
        className
      )}
      {...props}
    />
  )
}

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: components/ui/wavy-background.tsx
================
"use client";
import { cn } from "@/lib/utils";
import { useEffect, useRef, useState, useCallback } from "react";
import type { FC, ReactNode } from "react";
import { createNoise3D } from "simplex-noise";
import type { NoiseFunction3D } from "simplex-noise";

interface WavyBackgroundProps {
  children?: ReactNode;
  className?: string;
  containerClassName?: string;
  colors?: string[];
  waveWidth?: number;
  backgroundFill?: string;
  blur?: number;
  speed?: "slow" | "fast";
  waveOpacity?: number;
  [key: string]: unknown;
}

export const WavyBackground: FC<WavyBackgroundProps> = ({
  children,
  className,
  containerClassName,
  colors = ["#38bdf8", "#818cf8", "#c084fc", "#e879f9", "#22d3ee"],
  waveWidth,
  backgroundFill,
  blur = 10,
  speed = "fast",
  waveOpacity = 0.5,
  ...props
}) => {
  const noise = useRef<NoiseFunction3D>(createNoise3D());
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isSafari, setIsSafari] = useState(false);

  // Move these to useRef to maintain values between renders
  const wRef = useRef<number>(0);
  const hRef = useRef<number>(0);
  const ntRef = useRef<number>(0);
  const ctxRef = useRef<CanvasRenderingContext2D | null>(null);
  const canvasInstanceRef = useRef<HTMLCanvasElement | null>(null);
  const animationIdRef = useRef<number>();

  const getSpeed = useCallback(() => {
    switch (speed) {
      case "slow":
        return 0.001;
      case "fast":
        return 0.002;
      default:
        return 0.001;
    }
  }, [speed]);

  const drawWave = useCallback((n: number) => {
    const ctx = ctxRef.current;
    if (!ctx) return;

    ntRef.current += getSpeed();
    for (let i = 0; i < n; i++) {
      ctx.beginPath();
      ctx.lineWidth = waveWidth ?? 50;
      ctx.strokeStyle = colors[i % colors.length];
      for (let x = 0; x < wRef.current; x += 5) {
        const y = noise.current(x / 800, 0.3 * i, ntRef.current) * 100;
        ctx.lineTo(x, y + hRef.current * 0.5);
      }
      ctx.stroke();
      ctx.closePath();
    }
  }, [getSpeed, colors, waveWidth]);

  const render = useCallback(() => {
    const ctx = ctxRef.current;
    if (!ctx) return;

    ctx.fillStyle = backgroundFill ?? "black";
    ctx.globalAlpha = waveOpacity ?? 0.5;
    ctx.fillRect(0, 0, wRef.current, hRef.current);
    drawWave(5);
    animationIdRef.current = window.requestAnimationFrame(render);
  }, [backgroundFill, drawWave, waveOpacity]);

  const init = useCallback(() => {
    canvasInstanceRef.current = canvasRef.current;
    if (!canvasInstanceRef.current) return;

    ctxRef.current = canvasInstanceRef.current.getContext("2d");
    if (!ctxRef.current) return;

    wRef.current = ctxRef.current.canvas.width = window.innerWidth;
    hRef.current = ctxRef.current.canvas.height = window.innerHeight;
    ctxRef.current.filter = `blur(${blur}px)`;
    ntRef.current = 0;

    window.onresize = () => {
      if (!ctxRef.current) return;
      wRef.current = ctxRef.current.canvas.width = window.innerWidth;
      hRef.current = ctxRef.current.canvas.height = window.innerHeight;
      ctxRef.current.filter = `blur(${blur}px)`;
    };

    render();
  }, [blur, render]);

  useEffect(() => {
    init();
    return () => {
      if (animationIdRef.current !== undefined) {
        window.cancelAnimationFrame(animationIdRef.current);
      }
    };
  }, [init]);

  useEffect(() => {
    setIsSafari(
      typeof window !== "undefined" &&
        navigator.userAgent.includes("Safari") &&
        !navigator.userAgent.includes("Chrome")
    );
  }, []);

  return (
    <div
      className={cn(
        "min-h-screen w-full fixed inset-0 flex flex-col items-center justify-center overflow-hidden pt-16",
        containerClassName
      )}
      {...props}
    >
      <canvas
        className="absolute inset-0 w-full h-full"
        ref={canvasRef}
        id="canvas"
        style={{
          ...(isSafari ? { filter: `blur(${blur}px)` } : {}),
        }}
      />
      <div className={cn("relative z-10 w-full h-full flex flex-col", className)}>
        {children}
      </div>
    </div>
  );
};

================
File: components/AgentResponse.tsx
================
import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { ChevronDown, ChevronUp, Brain, Globe } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { LoadingDots } from '@/components/ui/loading-dots'
import { cn } from '@/lib/utils'

interface AgentResponseProps {
  agent: 'PFC' | 'General'
  response: string
  isLoading?: boolean
}

const agentConfig = {
  PFC: {
    icon: Brain,
    label: 'PFC Agent',
    gradientClass: 'from-violet-500 to-purple-600',
    loadingColor: 'bg-violet-500'
  },
  General: {
    icon: Globe,
    label: 'General Agent',
    gradientClass: 'from-blue-500 to-cyan-600',
    loadingColor: 'bg-blue-500'
  },
}

export function AgentResponse({ agent, response, isLoading = false }: AgentResponseProps) {
  const [isOpen, setIsOpen] = useState(true)
  const { icon: Icon, label, gradientClass, loadingColor } = agentConfig[agent]

  return (
    <div className="mb-2 w-full">
      <Button
        onClick={() => setIsOpen(!isOpen)}
        className={cn(
          "w-full flex items-center justify-between p-2 rounded-lg bg-gradient-to-r",
          gradientClass,
          "text-white hover:opacity-90 transition-all duration-200",
          "shadow-lg hover:shadow-xl"
        )}
        variant="ghost"
      >
        <div className="flex items-center space-x-2">
          <Icon className="w-5 h-5" />
          <span className="text-sm font-medium">{label}</span>
        </div>
        {isOpen ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
      </Button>
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
            className={cn(
              "p-3 rounded-b-lg mt-1",
              "bg-white/80 dark:bg-gray-900/80",
              "backdrop-blur-lg backdrop-saturate-150",
              "border border-white/20 dark:border-gray-800/20",
              "shadow-lg shadow-black/5 dark:shadow-white/5"
            )}
          >
            {isLoading ? (
              <div className="flex items-center justify-center py-4">
                <LoadingDots className={loadingColor} />
              </div>
            ) : (
              <p className="text-gray-800 dark:text-gray-200 text-sm">{response}</p>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}

================
File: components/BotAvatar.tsx
================
export function BotAvatar() {
  return (
    <svg
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      className="w-full h-full p-1"
      role="img"
      aria-label="AI Assistant Avatar"
    >
      <title>AI Assistant Avatar</title>
      <path
        d="M12 2a10 10 0 0 1 10 10c0 4.42-2.87 8.17-6.84 9.5-1.08.36-2.03.5-3.16.5-1.13 0-2.08-.14-3.16-.5C4.87 20.17 2 16.42 2 12 2 6.48 6.48 2 12 2z"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M8 14s1.5 2 4 2 4-2 4-2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <circle cx="9" cy="9" r="1" fill="currentColor" />
      <circle cx="15" cy="9" r="1" fill="currentColor" />
    </svg>
  )
}

================
File: components/ChatContainer.tsx
================
'use client'

import { cn } from '@/lib/utils'
import { useChatScroll } from '@/hooks/use-chat-scroll'
import type { Message } from '@/types/chat'
import { ChatMessage } from './ChatMessage'

interface ChatContainerProps {
  messages: Message[]
  onDelete?: (id: string) => void
  className?: string
}

export function ChatContainer({ messages, onDelete, className }: ChatContainerProps) {
  const { scrollRef } = useChatScroll({ messages })

  return (
    <div className={cn(
      'w-full h-full',
      'flex flex-col overflow-hidden',
      'px-4 sm:px-6 lg:px-8',
      'mx-auto max-w-4xl',
      className
    )}>
      <div
        ref={scrollRef}
        className={cn(
          'flex-1',
          'overflow-y-auto overflow-x-hidden',
          'scroll-smooth overscroll-none',
          'py-4 sm:py-6 lg:py-8',
          'scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-700',
          'scrollbar-track-transparent scrollbar-thumb-rounded-full'
        )}
      >
        <ul className="flex flex-col space-y-2">
          {messages.map((message, i) => (
            <ChatMessage
              key={message.id}
              message={message}
              isPartOfGroup={i > 0 && messages[i - 1].isUser === message.isUser}
              showTimestamp={true}
              onDelete={onDelete}
            />
          ))}
        </ul>
      </div>
    </div>
  )
}

================
File: components/ChatInterfaceClient.tsx
================
'use client'

import { useState, useRef, useEffect, useCallback } from 'react'
import { Send, Menu, Brain, Globe } from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'
import { ChatContainer } from './ChatContainer'
import { ChatMessage } from './ChatMessage'
import { LoadingSpinner } from './LoadingSpinner'
import { AgentResponse } from './AgentResponse'
import { Button } from '@/components/ui/button'
import { TooltipProvider } from '@/components/ui/tooltip'
import { useMediaQuery } from '@/hooks/use-media-query'
import { cn } from "@/lib/utils"

interface Feedback {
  comment: string;
  type: 'positive' | 'negative';
}

interface Message {
  id: string;
  content: string;
  isUser: boolean;
  feedback?: Feedback;
  agentResponse?: string;
  timestamp: string;
}

type AgentType = 'PFC' | 'General'

type FormSubmitEvent = React.FormEvent<HTMLFormElement>;
type KeyboardSubmitEvent = React.KeyboardEvent<HTMLInputElement>;
type SubmitEvent = FormSubmitEvent | KeyboardSubmitEvent;

export function ChatInterfaceClient() {
  const MAX_MESSAGES = 50

  const [messages, setMessages] = useState<Message[]>([])
  const [input, setInput] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [agentType, setAgentType] = useState<AgentType>('General')
  const [activeFeedback, setActiveFeedback] = useState<string | null>(null)
  const [feedbackComment, setFeedbackComment] = useState('')
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const isMobile = useMediaQuery('(max-width: 640px)')
  const inputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    setMessages([
      {
        id: Date.now().toString(),
        content: 'Hi there! I am your AI assistant. How can I help you today?',
        isUser: false,
        timestamp: new Date().toISOString(),
      }
    ])
  }, [])

  useEffect(() => {
    if (error) {
      const timeout = setTimeout(() => setError(null), 5000)
      return () => clearTimeout(timeout)
    }
  }, [error])

  useEffect(() => {
    inputRef.current?.focus()
  }, [])

  useEffect(() => {
    if (messages.length > MAX_MESSAGES) {
      setMessages(prevMessages => prevMessages.slice(-MAX_MESSAGES))
    }
  }, [messages])

  const handleSubmit = useCallback(async (e: SubmitEvent) => {
    e.preventDefault()

    if (!input.trim()) {
      setError('Please enter a message');
      return;
    }

    setIsTyping(true);
    setError(null);

    try {
      const newMessage: Message = {
        id: crypto.randomUUID(),
        content: input,
        isUser: true,
        timestamp: new Date().toISOString()
      }

      setMessages(prev => [...prev, newMessage])
      setInput('')

      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 10000) // 10s timeout

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: newMessage.content,
          agent: agentType
        }),
        signal: controller.signal
      })

      clearTimeout(timeoutId)

      if (!response.ok) {
        throw new Error('Failed to send message');
      }

      const data = await response.json()

      const botMessage: Message = {
        id: Date.now().toString(),
        content: data.message,
        isUser: false,
        agentResponse: data.agentResponse,
        timestamp: new Date().toISOString(),
      }

      setMessages(prev => [...prev, botMessage])
    } catch (error) {
      console.error('Error:', error);
      setError('Failed to send message. Please try again.');
    } finally {
      setIsTyping(false)
    }
  }, [input, agentType])

  const handleAgentChange = useCallback((type: AgentType) => {
    setAgentType(type)
    setMessages([])
    setIsMenuOpen(false)
  }, [])

  const handleFeedback = useCallback((messageId: string, feedbackType: 'positive' | 'negative') => {
    setActiveFeedback(messageId)
    setMessages(prev => prev.map(message =>
      message.id === messageId ? { ...message, feedback: { type: feedbackType, comment: '' } } : message
    ))
  }, [])

  const handleFeedbackComment = (messageId: string) => {
    setMessages(prev => prev.map(message =>
      message.id === messageId && message.feedback
        ? { ...message, feedback: { ...message.feedback, comment: feedbackComment } }
        : message
    ))
    setActiveFeedback(null)
    setFeedbackComment('')
  }

  const handleDeleteMessage = useCallback((messageId: string) => {
    setMessages(prev => prev.filter(message => message.id !== messageId))
  }, [])

  return (
    <TooltipProvider>
      <div
        className="flex flex-col h-screen overflow-hidden text-gray-800 transition-colors duration-300 bg-gradient-to-br from-blue-100 to-purple-200 dark:from-blue-900 dark:to-purple-900 dark:text-gray-100"
        data-testid="chat-interface"
      >
        <header className="sticky top-0 z-10 flex items-center justify-between p-3 transition-colors duration-300 shadow-md sm:p-4 backdrop-blur-md bg-white/70 dark:bg-gray-900/70 rounded-b-2xl">
          <h1 className="text-lg font-semibold xs:text-xl sm:text-2xl gradient-text">SCANUEV Chat</h1>
          <div className="flex items-center space-x-2 sm:space-x-4">
            <Button
              variant="outline"
              size="icon"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="lg:hidden"
              aria-label="Open menu"
              aria-expanded={isMenuOpen}
            >
              <Menu className="w-5 h-5" />
            </Button>
            <AnimatePresence>
              {isMenuOpen && (
                <motion.div
                  initial={{ opacity: 0, scale: 0.95, y: -10 }}
                  animate={{ opacity: 1, scale: 1, y: 0 }}
                  exit={{ opacity: 0, scale: 0.95, y: -10 }}
                  transition={{ duration: 0.2 }}
                  className="absolute z-20 p-3 rounded-lg shadow-lg w-44 xs:w-48 xs:p-4 top-14 xs:top-16 right-2 xs:right-4 backdrop-blur-md bg-white/90 dark:bg-gray-900/90"
                >
                  <div className="flex flex-col space-y-2">
                    <Button
                      variant={agentType === 'PFC' ? 'gradient' : 'ghost'}
                      onClick={() => handleAgentChange('PFC')}
                      className="justify-start text-sm xs:text-base"
                    >
                      <Brain className="w-5 h-5 mr-2" /> PFC
                    </Button>
                    <Button
                      variant={agentType === 'General' ? 'gradient' : 'ghost'}
                      onClick={() => handleAgentChange('General')}
                      className="justify-start text-sm xs:text-base"
                    >
                      <Globe className="w-5 h-5 mr-2" /> General
                    </Button>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
            <div className="hidden overflow-hidden rounded-lg lg:flex">
              <Button
                variant={agentType === 'PFC' ? 'gradient' : 'secondary'}
                onClick={() => handleAgentChange('PFC')}
                className="rounded-r-none"
              >
                <Brain className="w-5 h-5 mr-2" /> PFC
              </Button>
              <Button
                variant={agentType === 'General' ? 'gradient' : 'secondary'}
                onClick={() => handleAgentChange('General')}
                className="rounded-l-none"
              >
                <Globe className="w-5 h-5 mr-2" /> General
              </Button>
            </div>
          </div>
        </header>
        <main className="flex-1 overflow-y-auto">
          <ChatContainer
            messages={messages}
            onDelete={handleDeleteMessage}
          />
        </main>
        <div className="fixed bottom-0 left-0 right-0 p-2 border-t sm:p-4 bg-background/95 backdrop-blur-sm">
          <div className="w-full px-2 sm:px-4">
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="flex items-end gap-2">
                <div className="flex-1">
                  <div className="relative">
                    <input
                      type="text"
                      value={input}
                      onChange={(e) => setInput(e.target.value)}
                      placeholder={`Message ${agentType} agent...`}
                      className={cn(
                        "w-full p-2 pr-10 rounded-lg",
                        "bg-muted/50 border focus:border-primary",
                        "placeholder:text-muted-foreground/70",
                        "focus:outline-none focus:ring-2 focus:ring-primary/20",
                        "text-base sm:text-lg",
                        "h-10 sm:h-12"
                      )}
                      disabled={isTyping}
                      aria-label={`Message ${agentType} agent`}
                    />
                    {isTyping && (
                      <div className="absolute -translate-y-1/2 right-3 top-1/2">
                        <LoadingSpinner size={20} />
                      </div>
                    )}
                  </div>
                </div>
                <Button
                  type="submit"
                  disabled={isTyping || !input.trim()}
                  variant="gradient"
                  size="icon"
                  className={cn(
                    "w-10 h-10 sm:w-12 sm:h-12",
                    "rounded-full",
                    "shadow-lg hover:shadow-xl",
                    "transition-all duration-200"
                  )}
                >
                  <Send className="w-5 h-5 sm:w-6 sm:h-6" />
                </Button>
              </div>
            </form>
          </div>
        </div>
        <div className="h-[60px] sm:h-[72px]" /> {/* Spacer to prevent overlap */}
        {error && <div className="text-red-500">{error}</div>}
      </div>
    </TooltipProvider>
  )
}

================
File: components/ChatMessage.tsx
================
'use client'

import { memo } from 'react'
import { Avatar, AvatarFallback } from '@/components/ui/avatar'
import { BotAvatar } from './BotAvatar'
import { User } from 'lucide-react'
import { cn, formatMessageTime } from '@/lib/utils'
import type { Message } from '@/types/chat'
import { MessageActions } from './MessageActions'

interface ChatMessageProps {
  message: Message
  isPartOfGroup: boolean
  showTimestamp: boolean
  onDelete?: (id: string) => void
  className?: string
}

function ChatMessageComponent({
  message,
  isPartOfGroup,
  showTimestamp,
  onDelete,
  className
}: ChatMessageProps) {
  const isUser = message.isUser
  const alignmentClass = isUser ? 'justify-end' : 'justify-start'
  const messageBgClass = isUser
    ? 'bg-blue-500 text-white'
    : 'bg-gray-200 dark:bg-gray-800 text-gray-800 dark:text-gray-200'

  return (
    <li
      className={cn(
        'flex items-end gap-2',
        alignmentClass,
        isPartOfGroup ? 'mt-1' : 'mt-4',
        className
      )}
      aria-label={`Message from ${isUser ? 'You' : 'Assistant'}`}
    >
      {!isUser && (
        <Avatar className="w-8 h-8 sm:w-10 sm:h-10 flex-shrink-0">
          <AvatarFallback>
            <BotAvatar />
          </AvatarFallback>
        </Avatar>
      )}
      <div className={cn(
        'relative group',
        'max-w-[75%] sm:max-w-[70%] break-words',
        'rounded-2xl p-3',
        messageBgClass,
        'shadow-sm',
        'transition-all duration-200'
      )}>
        <p className="text-sm sm:text-base whitespace-pre-wrap">{message.content}</p>
        {showTimestamp && (
          <time
            dateTime={message.timestamp}
            className="absolute bottom-0 right-0 -mb-5 text-xs text-gray-500 opacity-0 group-hover:opacity-100 transition-opacity"
          >
            {formatMessageTime(message.timestamp)}
          </time>
        )}
        <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
          <MessageActions message={message} onDelete={onDelete} />
        </div>
      </div>
      {isUser && (
        <Avatar className="w-8 h-8 sm:w-10 sm:h-10 flex-shrink-0">
          <AvatarFallback>
            <User className="w-5 h-5 text-gray-600" />
          </AvatarFallback>
        </Avatar>
      )}
    </li>
  )
}

export const ChatMessage = memo(ChatMessageComponent)

================
File: components/ChatSkeleton.tsx
================
export function ChatSkeleton() {
  return (
    <div className="space-y-4 animate-pulse">
      <div className="flex items-center space-x-4">
        <div className="w-10 h-10 rounded-full bg-muted" />
        <div className="flex-1 space-y-2">
          <div className="h-4 bg-muted rounded w-3/4" />
          <div className="h-4 bg-muted rounded w-1/2" />
        </div>
      </div>
      {/* Add more skeleton items */}
    </div>
  )
}

================
File: components/ErrorBoundary.tsx
================
import React from 'react'
import { Button } from '@/components/ui/button'

interface Props {
  children: React.ReactNode
}

interface State {
  hasError: boolean
  error: Error | null
}

export class ChatErrorBoundary extends React.Component<Props, State> {
  state: State = { hasError: false, error: null }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error }
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Chat error:', error, errorInfo)
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="p-4 rounded-lg bg-destructive/10 text-destructive">
          <h2 className="text-lg font-semibold mb-2">Something went wrong</h2>
          <p className="text-sm mb-4">{this.state.error?.message}</p>
          <Button onClick={() => this.setState({ hasError: false })}>
            Try Again
          </Button>
        </div>
      )
    }

    return this.props.children
  }
}

================
File: components/LoadingSpinner.tsx
================
'use client'

import React from 'react';

interface LoadingSpinnerProps {
  size?: number;
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 24 }) => (
  <div
    className="spinner"
    style={{ width: size, height: size }}
    role="status"
    aria-label="Loading"
  >
    {/* Spinner SVG or CSS animation */}
  </div>
);

================
File: components/MessageActions.tsx
================
'use client'

import { memo } from 'react'
import { MoreVertical, Trash } from 'lucide-react'
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
} from '@/components/ui/dropdown-menu'
import { Button } from '@/components/ui/button'
import type { Message } from '@/types/chat'
import { cn } from '@/lib/utils'

interface MessageActionsProps {
  message: Message
  onDelete?: (id: string) => void
}

function MessageActionsComponent({ message, onDelete }: MessageActionsProps) {
  if (!onDelete) return null

  const handleDelete = () => {
    if (window.confirm('Are you sure you want to delete this message?')) {
      onDelete(message.id)
    }
  }

  return (
    <DropdownMenu modal={false}>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          size="sm"
          className={cn(
            "h-8 w-8 p-0",
            "rounded-full",
            "hover:bg-gray-200 dark:hover:bg-gray-700",
            "focus-visible:ring-2 focus-visible:ring-primary",
            "transition-colors duration-200"
          )}
          aria-label="Message actions"
        >
          <MoreVertical className="w-4 h-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent
        align="end"
        side="right"
        sideOffset={8}
        className={cn(
          "w-48",
          "bg-white dark:bg-gray-800",
          "border border-gray-200 dark:border-gray-700",
          "shadow-lg",
          "animate-in fade-in-0 zoom-in-95",
          "duration-200"
        )}
      >
        <DropdownMenuItem
          className={cn(
            "flex items-center gap-2",
            "text-red-600 dark:text-red-400",
            "focus:text-red-600 dark:focus:text-red-400",
            "cursor-pointer"
          )}
          onClick={handleDelete}
        >
          <Trash className="w-4 h-4" />
          <span>Delete</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

export const MessageActions = memo(MessageActionsComponent)

================
File: components/MessageContextMenu.tsx
================
'use client'

import { Copy, ThumbsUp } from 'lucide-react'
import {
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuTrigger,
} from "@/components/ui/context-menu"
import type { Message } from '@/types/chat'

interface MessageContextMenuProps {
  children: React.ReactNode
  message: Message
  onFeedback: (messageId: string, type: 'positive' | 'negative') => void
  onCopy: (content: string) => void
}

export function MessageContextMenu({ children, message, onFeedback, onCopy }: MessageContextMenuProps) {
  return (
    <ContextMenu>
      <ContextMenuTrigger asChild>
        {children}
      </ContextMenuTrigger>
      <ContextMenuContent className="glass-card text-white/80">
        <ContextMenuItem
          className="hover:text-white focus:text-white"
          onClick={() => onCopy(message.content)}
        >
          <Copy className="w-4 h-4 mr-2" />
          Copy Message
        </ContextMenuItem>
        {!message.isUser && (
          <ContextMenuItem
            className="hover:text-white focus:text-white"
            onClick={() => onFeedback(message.id, 'positive')}
          >
            <ThumbsUp className="w-4 h-4 mr-2" />
            Mark as Helpful
          </ContextMenuItem>
        )}
      </ContextMenuContent>
    </ContextMenu>
  )
}

================
File: components/Navigation.tsx
================
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Home, MessageSquare, User, LogIn } from 'lucide-react'
import { cn } from "@/lib/utils"
import { useScrollDirection } from '@/hooks/use-scroll-direction'
import type { LucideIcon } from 'lucide-react'

interface NavItem {
  href: string
  icon: LucideIcon
  label: string
}

const navItems: NavItem[] = [
  { href: '/', icon: Home, label: 'Home' },
  { href: '/chat', icon: MessageSquare, label: 'Chat' },
  { href: '/account', icon: User, label: 'Account' },
  { href: '/login', icon: LogIn, label: 'Login' },
]

interface NavItemProps {
  href: string
  icon: LucideIcon
  label: string
  isActive: boolean
}

function NavItem({ href, icon: Icon, label, isActive }: NavItemProps) {
  return (
    <Link
      href={href}
      className={cn(
        "flex flex-col items-center gap-1 p-2 rounded-lg transition-colors",
        "hover:bg-accent hover:shadow-md",
        isActive && "text-primary font-medium"
      )}
    >
      <Icon className="nav-icon h-6 w-6" />
      <span className="nav-label text-xs">{label}</span>
    </Link>
  )
}

export function Navigation() {
  const pathname = usePathname()
  const isScrollingDown = useScrollDirection()

  return (
    <nav className={cn(
      "nav-container",
      "motion-safe:transition-transform motion-safe:duration-300",
      isScrollingDown && "transform -translate-y-full"
    )}>
      <div className="container mx-auto px-4">
        <div className="flex justify-around items-center h-16">
          {navItems.map((item) => (
            <NavItem
              key={item.href}
              href={item.href}
              icon={item.icon}
              label={item.label}
              isActive={pathname === item.href}
            />
          ))}
        </div>
      </div>
    </nav>
  )
}

================
File: components/PageTransition.tsx
================
'use client'

import { motion, AnimatePresence } from 'framer-motion'
import { usePathname } from 'next/navigation'
import { useMediaQuery } from '@/hooks/use-media-query'

const pageVariants = {
  initial: {
    opacity: 0,
    y: 20
  },
  animate: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.3,
      ease: [0.25, 0.1, 0.25, 1.0],
      staggerChildren: 0.1
    }
  },
  exit: {
    opacity: 0,
    y: -20,
    transition: {
      duration: 0.2,
      ease: [0.25, 0.1, 0.25, 1.0]
    }
  }
}

export function PageTransition({ children }: { children: React.ReactNode }) {
  const pathname = usePathname()
  const isReducedMotion = useMediaQuery('(prefers-reduced-motion: reduce)')

  return (
    <AnimatePresence mode="wait">
      <motion.div
        key={pathname}
        initial="initial"
        animate="animate"
        exit="exit"
        variants={pageVariants}
        transition={{
          duration: isReducedMotion ? 0 : 0.3,
          ease: [0.25, 0.1, 0.25, 1.0],
        }}
        className="min-h-screen"
        data-testid="page-transition"
      >
        {children}
      </motion.div>
    </AnimatePresence>
  )
}

================
File: components/ScrollToTop.tsx
================
import React, { useState, useEffect, useCallback } from 'react'
import { AnimatePresence, motion } from 'framer-motion'
import { ArrowUp } from 'lucide-react'
import debounce from 'lodash/debounce'
import type { DebouncedFunc } from 'lodash/debounce'

export function ScrollToTop() {
  const [show, setShow] = useState(false)

  const handleScroll: DebouncedFunc<() => void> = useCallback(
    debounce(() => {
      setShow(window.scrollY > 300)
    }, 100),
    []
  )

  useEffect(() => {
    window.addEventListener('scroll', handleScroll, { passive: true })
    return () => {
      window.removeEventListener('scroll', handleScroll)
      handleScroll.cancel()
    }
  }, [handleScroll])

  return (
    <AnimatePresence>
      {show && (
        <motion.button
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 10 }}
          onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
          className="fixed bottom-20 right-4 p-2 rounded-full bg-primary text-white shadow-lg"
        >
          <ArrowUp className="h-5 w-5" />
        </motion.button>
      )}
    </AnimatePresence>
  )
}

================
File: cypress/e2e/chat.cy.js
================
describe('Chat Interface', () => {
  beforeEach(() => {
    cy.clearLocalStorage()
    cy.clearCookies()
    cy.visit('/chat')
    cy.get('[data-testid="chat-interface"]').should('be.visible')
  })

  it('sends a message and receives a response', () => {
    cy.get('input[placeholder*="Message"]').type('Hello{enter}')
    cy.contains('Hello').should('be.visible')
    cy.contains('This is a simulated', { timeout: 10000 }).should('be.visible')
  })

  it('switches between agent types', () => {
    cy.contains('PFC').click()
    cy.get('input[placeholder*="Message PFC agent"]').should('be.visible')
    cy.contains('General').click()
    cy.get('input[placeholder*="Message General agent"]').should('be.visible')
  })

  it('handles feedback submission', () => {
    cy.get('input[placeholder*="Message"]').type('Test message{enter}')
    cy.get('button[aria-label="Positive feedback"]', { timeout: 10000 }).should('be.visible').click()
    cy.get('input[placeholder*="Write your feedback"]').type('Great response!')
    cy.get('button[aria-label="Submit feedback"]').click()
  })
})

================
File: cypress/e2e/navigation.cy.js
================
describe('Navigation', () => {
  beforeEach(() => {
    /* Clear any persisted state before each test */
    cy.clearLocalStorage()
    cy.clearCookies()
  })

  it('navigates between pages', () => {
    cy.visit('/')
    cy.get('[data-testid="chat-interface"]', { timeout: 10000 }).should('be.visible')
    cy.get('nav')
      .should('be.visible')
      .and('have.css', 'position', 'fixed')
      .and('have.css', 'top', '0px')

    // Test scroll behavior
    cy.window().then(($window) => {
      // Ensure smooth scrolling
      $window.scrollTo({ top: 100, behavior: 'smooth' })
    })
    cy.get('nav')
      .should('have.class', 'transform')
      .and('have.css', 'transform')
      .and('include', 'translateY(-100%)')

    cy.window().then(($window) => {
      $window.scrollTo({ top: 0, behavior: 'smooth' })
    })
    cy.get('nav').should('not.have.class', 'transform')

    cy.contains('SCANUEV Chat').should('be.visible')

    cy.get('a[href="/about"]').click()
    cy.url().should('include', '/about')
    // Add more specific content checks
    cy.contains('About SCANUEV').should('be.visible')
    cy.contains('Key Features:').should('be.visible')

    cy.get('a[href="/"]').click()
    // Ensure we're back on the home page
    cy.url().should('not.include', '/about')
    cy.contains('SCANUEV Chat').should('be.visible')
  })

  it('displays 404 page for non-existent routes', () => {
    cy.visit('/non-existent-page', { failOnStatusCode: false })
    cy.get('[data-testid="404-page"]').should('be.visible')
  })
})

================
File: cypress/support/commands.js
================
// Example custom command
Cypress.Commands.add('login', (username, password) => {
  cy.get('input[name=username]').type(username)
  cy.get('input[name=password]').type(password)
  cy.get('button[type=submit]').click()
})

================
File: cypress/support/e2e.js
================
// This is your support file
// You can add custom commands or global hooks here

// Import commands.js using ES2015 syntax:
import './commands'

// Alternatively, you can use CommonJS syntax:
// require('./commands')

================
File: hooks/use-chat-scroll.ts
================
import { useEffect, useRef } from 'react'
import type { Message } from '@/types/chat'

interface UseChatScrollOptions {
  messages: Message[]
  shouldAutoScroll?: boolean
  threshold?: number
}

export function useChatScroll({
  messages,
  shouldAutoScroll = true,
  threshold = 100
}: UseChatScrollOptions) {
  const scrollRef = useRef<HTMLDivElement>(null)

  // biome-ignore lint/correctness/useExhaustiveDependencies: We need messages dependency to trigger scroll
  useEffect(() => {
    const scrollElement = scrollRef.current
    if (!scrollElement || !shouldAutoScroll) return

    const shouldScroll =
      scrollElement.scrollHeight - scrollElement.scrollTop - scrollElement.clientHeight < threshold

    if (shouldScroll) {
      requestAnimationFrame(() => {
        scrollElement.scrollTop = scrollElement.scrollHeight
      })
    }
  }, [messages, shouldAutoScroll, threshold])

  useEffect(() => {
    if (shouldAutoScroll) {
      const scrollElement = scrollRef.current;
      if (scrollElement) {
        scrollElement.scrollTop = scrollElement.scrollHeight;
      }
    }
  }, [shouldAutoScroll]);

  return { scrollRef }
}

================
File: hooks/use-chat-shortcuts.ts
================
import { useEffect, useCallback } from 'react'

type KeyHandler = (e: KeyboardEvent) => void
interface ShortcutHandlers {
  onSearch?: () => void
  onFocusInput?: () => void
}

export function useChatShortcuts(handlers: ShortcutHandlers = {}) {
  const handleKeyPress: KeyHandler = useCallback((e: KeyboardEvent) => {
    if (e.metaKey || e.ctrlKey) {
      switch (e.key) {
        case 'k':
          e.preventDefault()
          handlers.onSearch?.()
          break
        case '/':
          e.preventDefault()
          handlers.onFocusInput?.()
          break
      }
    }
  }, [handlers])

  useEffect(() => {
    window.addEventListener('keydown', handleKeyPress)
    return () => window.removeEventListener('keydown', handleKeyPress)
  }, [handleKeyPress])
}

================
File: hooks/use-media-query.test.tsx
================
import { renderHook } from '@testing-library/react';
import { useMediaQuery } from './use-media-query';

describe('useMediaQuery', () => {
  test('returns true when media query matches', () => {
    window.matchMedia = jest.fn().mockImplementation((query) => ({
      matches: true,
      media: query,
      onchange: null,
      addListener: jest.fn(),
      removeListener: jest.fn(),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn(),
    }));

    const { result } = renderHook(() => useMediaQuery('(min-width: 768px)'));
    expect(result.current).toBe(true);
  });

  // ... more tests
});

================
File: hooks/use-media-query.ts
================
'use client'

import { useState, useEffect } from 'react'

export function useMediaQuery(query: string): boolean {
  const [matches, setMatches] = useState<boolean>(false)

  useEffect(() => {
    const media = window.matchMedia(query)
    setMatches(media.matches)

    const listener = () => setMatches(media.matches)
    media.addEventListener('change', listener)

    return () => media.removeEventListener('change', listener)
  }, [query])

  return matches
}

================
File: hooks/use-scroll-direction.ts
================
import { useState, useEffect, useCallback } from 'react'
import debounce from 'lodash/debounce'
import type { DebouncedFunc } from 'lodash/debounce'

const SCROLL_THRESHOLD = 50
const DEBOUNCE_DELAY = 10 // milliseconds

interface ScrollState {
  isScrollingDown: boolean
  lastScrollY: number
}

export function useScrollDirection() {
  const [scrollState, setScrollState] = useState<ScrollState>({
    isScrollingDown: false,
    lastScrollY: 0
  })

  const handleScroll = useCallback(
    debounce(() => {
      if (typeof window === 'undefined') return

      setScrollState(prev => {
        const currentScrollY = window.scrollY
        const isScrollingDownNow = currentScrollY > prev.lastScrollY && currentScrollY > SCROLL_THRESHOLD

        if (isScrollingDownNow === prev.isScrollingDown) {
          return prev
        }

        return {
          isScrollingDown: isScrollingDownNow,
          lastScrollY: currentScrollY
        }
      })
    }, DEBOUNCE_DELAY),
    []
  )

  useEffect(() => {
    // Check if window is available (SSR)
    if (typeof window === 'undefined') return

    // Initial check
    handleScroll()

    window.addEventListener('scroll', handleScroll, { passive: true })
    return () => {
      window.removeEventListener('scroll', handleScroll)
      handleScroll.cancel() // Cancel any pending debounced calls
    }
  }, [handleScroll])

  return scrollState.isScrollingDown
}

================
File: lib/rate-limit.test.ts
================
import { rateLimit, RATE_LIMIT } from './rate-limit'
import { NextRequest } from 'next/server'

describe('rateLimit', () => {
  beforeEach(() => {
    jest.useFakeTimers()
  })

  afterEach(() => {
    jest.useRealTimers()
  })

  it('allows requests under the rate limit', async () => {
    const request = new NextRequest('https://example.com')

    for (let i = 0; i < RATE_LIMIT; i++) {
      const result = await rateLimit(request)
      expect(result.success).toBe(true)
      expect(result.remaining).toBe(RATE_LIMIT - i - 1)
    }
  })

  it('blocks requests over the rate limit', async () => {
    const request = new NextRequest('https://example.com')

    for (let i = 0; i < RATE_LIMIT; i++) {
      await rateLimit(request)
    }

    const result = await rateLimit(request)
    expect(result.success).toBe(false)
    expect(result.remaining).toBe(0)
  })

  it('resets rate limit after window expires', async () => {
    const request = new NextRequest('https://example.com')
    await rateLimit(request)

    jest.advanceTimersByTime(60_000)

    const result = await rateLimit(request)
    expect(result.success).toBe(true)
    expect(result.remaining).toBe(RATE_LIMIT - 1)
  })
})

================
File: lib/rate-limit.ts
================
import type { NextRequest } from 'next/server'

const RATE_LIMIT = Number(process.env.RATE_LIMIT ?? 100)
const RATE_LIMIT_WINDOW = Number(process.env.RATE_LIMIT_WINDOW ?? 60000)

interface RateLimitResult {
  success: boolean
  remaining: number
}

interface RateLimitState {
  timestamp: number
  count: number
}

const states = new Map<string, RateLimitState>()

export function rateLimit(req: NextRequest): RateLimitResult {
  const ip = req.ip ?? '127.0.0.1'
  const now = Date.now()
  const state = states.get(ip)

  if (!state) {
    states.set(ip, { timestamp: now, count: 1 })
    return { success: true, remaining: RATE_LIMIT - 1 }
  }

  if (now - state.timestamp > RATE_LIMIT_WINDOW) {
    state.timestamp = now
    state.count = 1
    return { success: true, remaining: RATE_LIMIT - 1 }
  }

  state.count++
  return {
    success: state.count <= RATE_LIMIT,
    remaining: Math.max(0, RATE_LIMIT - state.count)
  }
}

export { RATE_LIMIT }

================
File: lib/sanitize.ts
================
export function sanitizeInput(input: unknown): string {
  if (typeof input !== 'string') {
    return ''
  }

  return input
    .trim()
    .replace(/[<>]/g, '') // Basic XSS prevention
    .slice(0, 1000) // Enforce max length
}

================
File: lib/utils.ts
================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatMessageTime(timestamp: string): string {
  return new Intl.DateTimeFormat('en-US', {
    hour: 'numeric',
    minute: 'numeric',
    hour12: true
  }).format(new Date(timestamp))
}

================
File: src/utils/formatTime.ts
================
export const formatTime = (date: Date): string => {
  const hours = date.getHours().toString().padStart(2, '0')
  const minutes = date.getMinutes().toString().padStart(2, '0')
  return `${hours}:${minutes}`
}

================
File: types/chat.ts
================
export interface Message {
  id: string;
  content: string;
  isUser: boolean;
  timestamp: string;
  agentResponse?: string;
  feedback?: {
    type: 'positive' | 'negative';
    comment: string;
  };
}

export type AgentType = 'General' | 'PFC';

================
File: types/jest.d.ts
================
import '@testing-library/jest-dom';

declare global {
  namespace jest {
    interface Matchers<R> {
      toBeInTheDocument(): R;
      toBeVisible(): R;
    }
  }
}

export {};

================
File: types/loading-spinner.ts
================
export interface LoadingSpinnerProps {
  size?: number;
}

================
File: types/lodash.d.ts
================
declare module 'lodash' {
  export interface DebouncedFunc<T extends (...args: unknown[]) => unknown> {
    (...args: Parameters<T>): ReturnType<T>;
    cancel(): void;
    flush(): ReturnType<T>;
  }
}

declare module 'lodash/debounce' {
  export interface DebouncedFunc<T extends (...args: unknown[]) => unknown> {
    (...args: Parameters<T>): ReturnType<T>;
    cancel(): void;
    flush(): ReturnType<T>;
  }

  export default function debounce<T extends (...args: unknown[]) => unknown>(
    func: T,
    wait?: number,
    options?: {
      leading?: boolean;
      trailing?: boolean;
      maxWait?: number;
    }
  ): DebouncedFunc<T>;
}

================
File: types/media-query.d.ts
================
export interface MediaQueryList extends globalThis.MediaQueryList {
  addListener?: (listener: (event: MediaQueryListEvent) => void) => void;
  removeListener?: (listener: (event: MediaQueryListEvent) => void) => void;
}

export interface MediaQueryListEvent extends globalThis.MediaQueryListEvent {
  matches: boolean;
  media: string;
  type: 'change';
}

================
File: types/media-query.ts
================
export type MediaQuery = 'sm' | 'md' | 'lg';

export type MediaQueryBreakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'

export type MediaQueryConfig = {
  [key in MediaQueryBreakpoint]: string
}

export const mediaQueries: MediaQueryConfig = {
  xs: '(min-width: 475px)',
  sm: '(min-width: 640px)',
  md: '(min-width: 768px)',
  lg: '(min-width: 1024px)',
  xl: '(min-width: 1280px)',
  '2xl': '(min-width: 1536px)'
}

================
File: types/radix.d.ts
================
import '@radix-ui/react-tooltip';
import '@radix-ui/react-context-menu';

declare module '@radix-ui/react-tooltip' {
  interface TooltipProviderProps {
    children: React.ReactNode;
  }
}

declare module '@radix-ui/react-context-menu' {
  interface ContextMenuPortalProps {
    children: React.ReactNode;
  }
}

================
File: types/react-components.d.ts
================
import type * as React from 'react'

declare module 'react' {
  interface ReactElement<
    P = Record<string, unknown>,
    T extends string | React.JSXElementConstructor<P> = string | React.JSXElementConstructor<P>
  > {
    type: T;
    props: P;
    key: React.Key | null;
  }
}

================
File: utils/formatTime.ts
================
export const formatTime = (date: Date): string => {
  const hours = date.getHours().toString().padStart(2, '0')
  const minutes = date.getMinutes().toString().padStart(2, '0')
  return `${hours}:${minutes}`
}

================
File: .dockerignore
================
node_modules
.next
.git
.gitignore
README.md

================
File: .env.local
================
NEXT_PUBLIC_API_URL=your_api_url_here
NEXT_PUBLIC_SITE_URL=your_site_url_here

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: cypress.config.js
================
const { defineConfig } = require("cypress");

module.exports = defineConfig({
  e2e: {
    setupNodeEvents(on, config) {
      // implement node event listeners here
    },
    baseUrl: 'http://localhost:3000',
    viewportWidth: 1280,
    viewportHeight: 720,
    supportFile: 'cypress/support/e2e.js',
  },
});

================
File: Dockerfile
================
# Use an official Node runtime as the base image
FROM node:18-alpine

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy the rest of the application code
COPY . .

# Build the Next.js application
RUN npm run build

# Expose the port the app runs on
EXPOSE 3000

# Start the application
CMD ["npm", "start"]

================
File: jest.config.js
================
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  dir: './',
})

const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/$1',
  },
  collectCoverage: true,
  collectCoverageFrom: [
    '**/*.{js,jsx,ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
    '!**/.next/**',
    '!**/coverage/**',
    '!**/cypress/**',
    '!**/types/**',
    '!**/mocks/**',
    '!**/__tests__/setup/**',
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
  },
}

module.exports = createJestConfig(customJestConfig)

================
File: jest.setup.js
================
import '@testing-library/jest-dom'

Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
    toString: jest.fn().mockReturnValue(query),
  })),
})

================
File: next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

================
File: next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'standalone',
}

module.exports = nextConfig

================
File: package.json
================
{
  "name": "scanuev",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "cypress:open": "cypress open",
    "cypress:run": "cypress run"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-context-menu": "^2.2.4",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-tooltip": "^1.1.6",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^10.18.0",
    "lodash": "^4.17.21",
    "lucide-react": "^0.284.0",
    "next": "13.5.4",
    "react": "^18.3.1",
    "react-dom": "^18",
    "simplex-noise": "^4.0.3",
    "tailwind-merge": "^1.14.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.15",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^14.1.2",
    "@testing-library/user-event": "^14.0.0",
    "@types/jest": "^29.5.14",
    "@types/lodash": "4.17.13",
    "@types/node": "^20.10.6",
    "@types/react": "^18.2.46",
    "@types/react-dom": "^18.2.18",
    "autoprefixer": "^10",
    "eslint": "^8",
    "eslint-config-next": "13.5.4",
    "jest": "^29.5.0",
    "jest-environment-jsdom": "^29.5.0",
    "msw": "^2.0.0",
    "postcss": "^8",
    "tailwindcss": "^3",
    "typescript": "^5",
    "cypress": "^12.0.0",
    "@testing-library/react-hooks": "^8.0.2"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# SCANUEV Chat Interface

SCANUEV is an advanced conversational AI platform that allows users to interact with different types of AI agents.

## Getting Started

### Prerequisites

- Node.js 14.x or later
- npm 6.x or later

### Installation

1. Clone the repository:

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
      },
      keyframes: {
        "fade-in": {
          "0%": { opacity: "0" },
          "100%": { opacity: "1" },
        },
        "fade-out": {
          "0%": { opacity: "1" },
          "100%": { opacity: "0" },
        },
        "scale-in": {
          "0%": { transform: "scale(0.95)", opacity: "0" },
          "100%": { transform: "scale(1)", opacity: "1" },
        },
        "slide-in": {
          "0%": { transform: "translateY(10px)", opacity: "0" },
          "100%": { transform: "translateY(0)", opacity: "1" },
        },
      },
      animation: {
        "fade-in": "fade-in 200ms ease-out",
        "fade-out": "fade-out 0.3s ease-in-out",
        "scale-in": "scale-in 200ms ease-out",
        "slide-in": "slide-in 200ms ease-out",
      },
    },
  },
  plugins: [
    require("tailwindcss-animate"),
    require("@tailwindcss/typography"),
  ],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./*"
      ],
      "@/components/*": ["./components/*"],
      "@/lib/*": ["./lib/*"],
      "@/types/*": ["./types/*"],
      "@/hooks/*": ["./hooks/*"]
    },
    "typeRoots": ["./node_modules/@types", "./types"],
    "downlevelIteration": true,
    "types": [
      "node",
      "react",
      "react-dom",
      "jest",
      "@testing-library/jest-dom"
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "types/**/*.d.ts"],
  "exclude": ["node_modules"]
}

================
File: tsconfig.tsbuildinfo
================
{"fileNames":["./node_modules/typescript/lib/lib.es5.d.ts","./node_modules/typescript/lib/lib.es2015.d.ts","./node_modules/typescript/lib/lib.es2016.d.ts","./node_modules/typescript/lib/lib.es2017.d.ts","./node_modules/typescript/lib/lib.es2018.d.ts","./node_modules/typescript/lib/lib.es2019.d.ts","./node_modules/typescript/lib/lib.es2020.d.ts","./node_modules/typescript/lib/lib.es2021.d.ts","./node_modules/typescript/lib/lib.es2022.d.ts","./node_modules/typescript/lib/lib.es2023.d.ts","./node_modules/typescript/lib/lib.es2024.d.ts","./node_modules/typescript/lib/lib.esnext.d.ts","./node_modules/typescript/lib/lib.dom.d.ts","./node_modules/typescript/lib/lib.dom.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.core.d.ts","./node_modules/typescript/lib/lib.es2015.collection.d.ts","./node_modules/typescript/lib/lib.es2015.generator.d.ts","./node_modules/typescript/lib/lib.es2015.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.promise.d.ts","./node_modules/typescript/lib/lib.es2015.proxy.d.ts","./node_modules/typescript/lib/lib.es2015.reflect.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2016.array.include.d.ts","./node_modules/typescript/lib/lib.es2016.intl.d.ts","./node_modules/typescript/lib/lib.es2017.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2017.date.d.ts","./node_modules/typescript/lib/lib.es2017.object.d.ts","./node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2017.string.d.ts","./node_modules/typescript/lib/lib.es2017.intl.d.ts","./node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","./node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","./node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","./node_modules/typescript/lib/lib.es2018.intl.d.ts","./node_modules/typescript/lib/lib.es2018.promise.d.ts","./node_modules/typescript/lib/lib.es2018.regexp.d.ts","./node_modules/typescript/lib/lib.es2019.array.d.ts","./node_modules/typescript/lib/lib.es2019.object.d.ts","./node_modules/typescript/lib/lib.es2019.string.d.ts","./node_modules/typescript/lib/lib.es2019.symbol.d.ts","./node_modules/typescript/lib/lib.es2019.intl.d.ts","./node_modules/typescript/lib/lib.es2020.bigint.d.ts","./node_modules/typescript/lib/lib.es2020.date.d.ts","./node_modules/typescript/lib/lib.es2020.promise.d.ts","./node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2020.string.d.ts","./node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2020.intl.d.ts","./node_modules/typescript/lib/lib.es2020.number.d.ts","./node_modules/typescript/lib/lib.es2021.promise.d.ts","./node_modules/typescript/lib/lib.es2021.string.d.ts","./node_modules/typescript/lib/lib.es2021.weakref.d.ts","./node_modules/typescript/lib/lib.es2021.intl.d.ts","./node_modules/typescript/lib/lib.es2022.array.d.ts","./node_modules/typescript/lib/lib.es2022.error.d.ts","./node_modules/typescript/lib/lib.es2022.intl.d.ts","./node_modules/typescript/lib/lib.es2022.object.d.ts","./node_modules/typescript/lib/lib.es2022.string.d.ts","./node_modules/typescript/lib/lib.es2022.regexp.d.ts","./node_modules/typescript/lib/lib.es2023.array.d.ts","./node_modules/typescript/lib/lib.es2023.collection.d.ts","./node_modules/typescript/lib/lib.es2023.intl.d.ts","./node_modules/typescript/lib/lib.es2024.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2024.collection.d.ts","./node_modules/typescript/lib/lib.es2024.object.d.ts","./node_modules/typescript/lib/lib.es2024.promise.d.ts","./node_modules/typescript/lib/lib.es2024.regexp.d.ts","./node_modules/typescript/lib/lib.es2024.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2024.string.d.ts","./node_modules/typescript/lib/lib.esnext.array.d.ts","./node_modules/typescript/lib/lib.esnext.collection.d.ts","./node_modules/typescript/lib/lib.esnext.intl.d.ts","./node_modules/typescript/lib/lib.esnext.disposable.d.ts","./node_modules/typescript/lib/lib.esnext.decorators.d.ts","./node_modules/typescript/lib/lib.esnext.iterator.d.ts","./node_modules/typescript/lib/lib.decorators.d.ts","./node_modules/typescript/lib/lib.decorators.legacy.d.ts","./node_modules/next/dist/styled-jsx/types/css.d.ts","./node_modules/@types/react/global.d.ts","./node_modules/csstype/index.d.ts","./node_modules/@types/prop-types/index.d.ts","./node_modules/@types/react/index.d.ts","./node_modules/next/dist/styled-jsx/types/index.d.ts","./node_modules/next/dist/styled-jsx/types/macro.d.ts","./node_modules/next/dist/styled-jsx/types/style.d.ts","./node_modules/next/dist/styled-jsx/types/global.d.ts","./node_modules/next/dist/shared/lib/amp.d.ts","./node_modules/next/amp.d.ts","./node_modules/@types/node/compatibility/disposable.d.ts","./node_modules/@types/node/compatibility/indexable.d.ts","./node_modules/@types/node/compatibility/iterators.d.ts","./node_modules/@types/node/compatibility/index.d.ts","./node_modules/@types/node/globals.typedarray.d.ts","./node_modules/@types/node/buffer.buffer.d.ts","./node_modules/undici-types/header.d.ts","./node_modules/undici-types/readable.d.ts","./node_modules/undici-types/file.d.ts","./node_modules/undici-types/fetch.d.ts","./node_modules/undici-types/formdata.d.ts","./node_modules/undici-types/connector.d.ts","./node_modules/undici-types/client.d.ts","./node_modules/undici-types/errors.d.ts","./node_modules/undici-types/dispatcher.d.ts","./node_modules/undici-types/global-dispatcher.d.ts","./node_modules/undici-types/global-origin.d.ts","./node_modules/undici-types/pool-stats.d.ts","./node_modules/undici-types/pool.d.ts","./node_modules/undici-types/handlers.d.ts","./node_modules/undici-types/balanced-pool.d.ts","./node_modules/undici-types/agent.d.ts","./node_modules/undici-types/mock-interceptor.d.ts","./node_modules/undici-types/mock-agent.d.ts","./node_modules/undici-types/mock-client.d.ts","./node_modules/undici-types/mock-pool.d.ts","./node_modules/undici-types/mock-errors.d.ts","./node_modules/undici-types/proxy-agent.d.ts","./node_modules/undici-types/env-http-proxy-agent.d.ts","./node_modules/undici-types/retry-handler.d.ts","./node_modules/undici-types/retry-agent.d.ts","./node_modules/undici-types/api.d.ts","./node_modules/undici-types/interceptors.d.ts","./node_modules/undici-types/util.d.ts","./node_modules/undici-types/cookies.d.ts","./node_modules/undici-types/patch.d.ts","./node_modules/undici-types/websocket.d.ts","./node_modules/undici-types/eventsource.d.ts","./node_modules/undici-types/filereader.d.ts","./node_modules/undici-types/diagnostics-channel.d.ts","./node_modules/undici-types/content-type.d.ts","./node_modules/undici-types/cache.d.ts","./node_modules/undici-types/index.d.ts","./node_modules/@types/node/globals.d.ts","./node_modules/@types/node/assert.d.ts","./node_modules/@types/node/assert/strict.d.ts","./node_modules/@types/node/async_hooks.d.ts","./node_modules/@types/node/buffer.d.ts","./node_modules/@types/node/child_process.d.ts","./node_modules/@types/node/cluster.d.ts","./node_modules/@types/node/console.d.ts","./node_modules/@types/node/constants.d.ts","./node_modules/@types/node/crypto.d.ts","./node_modules/@types/node/dgram.d.ts","./node_modules/@types/node/diagnostics_channel.d.ts","./node_modules/@types/node/dns.d.ts","./node_modules/@types/node/dns/promises.d.ts","./node_modules/@types/node/domain.d.ts","./node_modules/@types/node/dom-events.d.ts","./node_modules/@types/node/events.d.ts","./node_modules/@types/node/fs.d.ts","./node_modules/@types/node/fs/promises.d.ts","./node_modules/@types/node/http.d.ts","./node_modules/@types/node/http2.d.ts","./node_modules/@types/node/https.d.ts","./node_modules/@types/node/inspector.d.ts","./node_modules/@types/node/module.d.ts","./node_modules/@types/node/net.d.ts","./node_modules/@types/node/os.d.ts","./node_modules/@types/node/path.d.ts","./node_modules/@types/node/perf_hooks.d.ts","./node_modules/@types/node/process.d.ts","./node_modules/@types/node/punycode.d.ts","./node_modules/@types/node/querystring.d.ts","./node_modules/@types/node/readline.d.ts","./node_modules/@types/node/readline/promises.d.ts","./node_modules/@types/node/repl.d.ts","./node_modules/@types/node/sea.d.ts","./node_modules/@types/node/stream.d.ts","./node_modules/@types/node/stream/promises.d.ts","./node_modules/@types/node/stream/consumers.d.ts","./node_modules/@types/node/stream/web.d.ts","./node_modules/@types/node/string_decoder.d.ts","./node_modules/@types/node/test.d.ts","./node_modules/@types/node/timers.d.ts","./node_modules/@types/node/timers/promises.d.ts","./node_modules/@types/node/tls.d.ts","./node_modules/@types/node/trace_events.d.ts","./node_modules/@types/node/tty.d.ts","./node_modules/@types/node/url.d.ts","./node_modules/@types/node/util.d.ts","./node_modules/@types/node/v8.d.ts","./node_modules/@types/node/vm.d.ts","./node_modules/@types/node/wasi.d.ts","./node_modules/@types/node/worker_threads.d.ts","./node_modules/@types/node/zlib.d.ts","./node_modules/@types/node/index.d.ts","./node_modules/next/dist/server/get-page-files.d.ts","./node_modules/@types/react/canary.d.ts","./node_modules/@types/react/experimental.d.ts","./node_modules/@types/react-dom/index.d.ts","./node_modules/@types/react-dom/canary.d.ts","./node_modules/@types/react-dom/experimental.d.ts","./node_modules/next/dist/compiled/webpack/webpack.d.ts","./node_modules/next/dist/server/config.d.ts","./node_modules/next/dist/lib/load-custom-routes.d.ts","./node_modules/next/dist/shared/lib/image-config.d.ts","./node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.d.ts","./node_modules/next/dist/server/body-streams.d.ts","./node_modules/next/dist/server/future/route-kind.d.ts","./node_modules/next/dist/server/future/route-definitions/route-definition.d.ts","./node_modules/next/dist/server/future/route-matches/route-match.d.ts","./node_modules/next/dist/client/components/app-router-headers.d.ts","./node_modules/next/dist/server/request-meta.d.ts","./node_modules/next/dist/server/config-shared.d.ts","./node_modules/next/dist/server/base-http/index.d.ts","./node_modules/next/dist/server/api-utils/index.d.ts","./node_modules/next/dist/server/node-environment.d.ts","./node_modules/next/dist/server/require-hook.d.ts","./node_modules/next/dist/server/node-polyfill-fetch.d.ts","./node_modules/next/dist/server/node-polyfill-form.d.ts","./node_modules/next/dist/server/node-polyfill-web-streams.d.ts","./node_modules/next/dist/server/node-polyfill-crypto.d.ts","./node_modules/next/dist/build/analysis/get-page-static-info.d.ts","./node_modules/next/dist/build/webpack/loaders/get-module-build-info.d.ts","./node_modules/next/dist/build/webpack/plugins/middleware-plugin.d.ts","./node_modules/next/dist/lib/setup-exception-listeners.d.ts","./node_modules/next/dist/build/index.d.ts","./node_modules/next/dist/server/response-cache/types.d.ts","./node_modules/next/dist/server/response-cache/index.d.ts","./node_modules/next/dist/server/lib/incremental-cache/index.d.ts","./node_modules/next/dist/client/components/hooks-server-context.d.ts","./node_modules/next/dist/client/components/static-generation-async-storage.external.d.ts","./node_modules/next/dist/server/pipe-readable.d.ts","./node_modules/next/dist/server/render-result.d.ts","./node_modules/next/dist/server/future/helpers/i18n-provider.d.ts","./node_modules/next/dist/server/web/next-url.d.ts","./node_modules/next/dist/compiled/@edge-runtime/cookies/index.d.ts","./node_modules/next/dist/server/web/spec-extension/cookies.d.ts","./node_modules/next/dist/server/web/spec-extension/request.d.ts","./node_modules/next/dist/server/web/spec-extension/fetch-event.d.ts","./node_modules/next/dist/server/web/spec-extension/response.d.ts","./node_modules/next/dist/server/web/types.d.ts","./node_modules/next/dist/build/webpack/plugins/pages-manifest-plugin.d.ts","./node_modules/next/dist/server/send-payload/revalidate-headers.d.ts","./node_modules/next/dist/server/send-payload/index.d.ts","./node_modules/next/dist/shared/lib/router/utils/route-regex.d.ts","./node_modules/next/dist/shared/lib/router/utils/route-matcher.d.ts","./node_modules/next/dist/server/base-http/node.d.ts","./node_modules/next/dist/shared/lib/router/utils/parse-url.d.ts","./node_modules/next/dist/server/font-utils.d.ts","./node_modules/next/dist/build/webpack/plugins/flight-manifest-plugin.d.ts","./node_modules/next/dist/server/future/route-modules/route-module.d.ts","./node_modules/next/dist/server/load-components.d.ts","./node_modules/next/dist/shared/lib/router/utils/middleware-route-matcher.d.ts","./node_modules/next/dist/build/webpack/plugins/next-font-manifest-plugin.d.ts","./node_modules/next/dist/server/render.d.ts","./node_modules/next/dist/server/future/route-definitions/locale-route-definition.d.ts","./node_modules/next/dist/server/future/route-definitions/pages-api-route-definition.d.ts","./node_modules/next/dist/server/future/route-matches/pages-api-route-match.d.ts","./node_modules/next/dist/server/future/route-matchers/route-matcher.d.ts","./node_modules/next/dist/server/future/route-matcher-providers/route-matcher-provider.d.ts","./node_modules/next/dist/server/future/route-matcher-managers/route-matcher-manager.d.ts","./node_modules/next/dist/server/future/normalizers/normalizer.d.ts","./node_modules/next/dist/server/future/normalizers/locale-route-normalizer.d.ts","./node_modules/next/dist/server/base-server.d.ts","./node_modules/next/dist/server/image-optimizer.d.ts","./node_modules/next/dist/server/next-server.d.ts","./node_modules/next/dist/server/dev/static-paths-worker.d.ts","./node_modules/next/dist/server/dev/next-dev-server.d.ts","./node_modules/next/dist/server/next.d.ts","./node_modules/next/dist/lib/metadata/types/alternative-urls-types.d.ts","./node_modules/next/dist/lib/metadata/types/extra-types.d.ts","./node_modules/next/dist/lib/metadata/types/metadata-types.d.ts","./node_modules/next/dist/lib/metadata/types/manifest-types.d.ts","./node_modules/next/dist/lib/metadata/types/opengraph-types.d.ts","./node_modules/next/dist/lib/metadata/types/twitter-types.d.ts","./node_modules/next/dist/lib/metadata/types/metadata-interface.d.ts","./node_modules/next/types/index.d.ts","./node_modules/next/dist/shared/lib/html-context.shared-runtime.d.ts","./node_modules/@next/env/dist/index.d.ts","./node_modules/next/dist/shared/lib/mitt.d.ts","./node_modules/next/dist/client/with-router.d.ts","./node_modules/next/dist/client/router.d.ts","./node_modules/next/dist/client/route-loader.d.ts","./node_modules/next/dist/client/page-loader.d.ts","./node_modules/next/dist/shared/lib/bloom-filter.d.ts","./node_modules/next/dist/shared/lib/router/router.d.ts","./node_modules/next/dist/shared/lib/modern-browserslist-target.d.ts","./node_modules/next/dist/shared/lib/constants.d.ts","./node_modules/next/dist/shared/lib/utils.d.ts","./node_modules/next/dist/pages/_app.d.ts","./node_modules/next/app.d.ts","./node_modules/next/dist/server/web/spec-extension/unstable-cache.d.ts","./node_modules/next/dist/server/web/spec-extension/revalidate-path.d.ts","./node_modules/next/dist/server/web/spec-extension/revalidate-tag.d.ts","./node_modules/next/cache.d.ts","./node_modules/next/dist/shared/lib/runtime-config.external.d.ts","./node_modules/next/config.d.ts","./node_modules/next/dist/pages/_document.d.ts","./node_modules/next/document.d.ts","./node_modules/next/dist/shared/lib/dynamic.d.ts","./node_modules/next/dynamic.d.ts","./node_modules/next/dist/pages/_error.d.ts","./node_modules/next/error.d.ts","./node_modules/next/dist/shared/lib/head.d.ts","./node_modules/next/head.d.ts","./node_modules/next/dist/shared/lib/get-img-props.d.ts","./node_modules/next/dist/client/image-component.d.ts","./node_modules/next/dist/shared/lib/image-external.d.ts","./node_modules/next/image.d.ts","./node_modules/next/dist/client/link.d.ts","./node_modules/next/link.d.ts","./node_modules/next/dist/shared/lib/server-inserted-html.shared-runtime.d.ts","./node_modules/next/dist/client/components/redirect.d.ts","./node_modules/next/dist/client/components/not-found.d.ts","./node_modules/next/dist/server/app-render/types.d.ts","./node_modules/next/dist/client/components/router-reducer/fetch-server-response.d.ts","./node_modules/next/dist/client/components/router-reducer/router-reducer-types.d.ts","./node_modules/next/dist/shared/lib/app-router-context.shared-runtime.d.ts","./node_modules/next/dist/client/components/navigation.d.ts","./node_modules/next/navigation.d.ts","./node_modules/next/router.d.ts","./node_modules/next/dist/client/script.d.ts","./node_modules/next/script.d.ts","./node_modules/next/dist/server/web/spec-extension/user-agent.d.ts","./node_modules/next/dist/compiled/@edge-runtime/primitives/url.d.ts","./node_modules/next/dist/compiled/@vercel/og/satori/index.d.ts","./node_modules/next/dist/compiled/@vercel/og/emoji/index.d.ts","./node_modules/next/dist/compiled/@vercel/og/types.d.ts","./node_modules/next/dist/compiled/@vercel/og/index.node.d.ts","./node_modules/next/dist/server/web/spec-extension/image-response.d.ts","./node_modules/next/server.d.ts","./node_modules/next/types/global.d.ts","./node_modules/next/types/compiled.d.ts","./node_modules/next/index.d.ts","./node_modules/next/image-types/global.d.ts","./next-env.d.ts","./lib/rate-limit.ts","./lib/sanitize.ts","./app/api/chat/route.ts","./__tests__/api/chat.test.ts","./hooks/use-media-query.ts","./lib/rate-limit.test.ts","./node_modules/clsx/clsx.d.ts","./node_modules/tailwind-merge/dist/lib/tw-join.d.ts","./node_modules/tailwind-merge/dist/lib/types.d.ts","./node_modules/tailwind-merge/dist/lib/create-tailwind-merge.d.ts","./node_modules/tailwind-merge/dist/lib/validators.d.ts","./node_modules/tailwind-merge/dist/lib/default-config.d.ts","./node_modules/tailwind-merge/dist/lib/extend-tailwind-merge.d.ts","./node_modules/tailwind-merge/dist/lib/from-theme.d.ts","./node_modules/tailwind-merge/dist/lib/merge-configs.d.ts","./node_modules/tailwind-merge/dist/lib/tw-merge.d.ts","./node_modules/tailwind-merge/dist/index.d.ts","./lib/utils.ts","./src/utils/formatTime.ts","./types/chat.ts","./node_modules/@jest/expect-utils/build/index.d.ts","./node_modules/chalk/index.d.ts","./node_modules/@sinclair/typebox/typebox.d.ts","./node_modules/@jest/schemas/build/index.d.ts","./node_modules/jest-diff/node_modules/pretty-format/build/index.d.ts","./node_modules/jest-diff/build/index.d.ts","./node_modules/jest-matcher-utils/build/index.d.ts","./node_modules/expect/build/index.d.ts","./node_modules/@types/jest/node_modules/pretty-format/build/index.d.ts","./node_modules/@types/jest/index.d.ts","./node_modules/@types/testing-library__jest-dom/matchers.d.ts","./node_modules/@types/testing-library__jest-dom/index.d.ts","./types/jest.d.ts","./node_modules/@radix-ui/react-context/dist/index.d.ts","./node_modules/@radix-ui/react-primitive/dist/index.d.ts","./node_modules/@radix-ui/react-dismissable-layer/dist/index.d.ts","./node_modules/@radix-ui/react-arrow/dist/index.d.ts","./node_modules/@radix-ui/rect/dist/index.d.ts","./node_modules/@radix-ui/react-popper/dist/index.d.ts","./node_modules/@radix-ui/react-portal/dist/index.d.ts","./node_modules/@radix-ui/react-tooltip/dist/index.d.ts","./node_modules/@radix-ui/react-focus-scope/dist/index.d.ts","./node_modules/@radix-ui/react-roving-focus/dist/index.d.ts","./node_modules/@radix-ui/react-menu/dist/index.d.ts","./node_modules/@radix-ui/react-context-menu/dist/index.d.ts","./types/radix.d.ts","./types/react-components.d.ts","./utils/formatTime.ts","./node_modules/@types/aria-query/index.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/matches.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/wait-for.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/query-helpers.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/get-queries-for-element.d.ts","./node_modules/pretty-format/build/types.d.ts","./node_modules/pretty-format/build/index.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/screen.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/wait-for-element-to-be-removed.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/get-node-text.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/events.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/pretty-dom.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/role-helpers.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/config.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/suggestions.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/index.d.ts","./node_modules/@types/react-dom/test-utils/index.d.ts","./node_modules/@testing-library/react/types/index.d.ts","./node_modules/framer-motion/dist/index.d.ts","./node_modules/lucide-react/dist/lucide-react.d.ts","./node_modules/@types/react/jsx-runtime.d.ts","./node_modules/@radix-ui/react-slot/dist/index.d.ts","./node_modules/class-variance-authority/dist/types.d.ts","./node_modules/class-variance-authority/dist/index.d.ts","./components/ui/button.tsx","./components/AgentResponse.tsx","./__tests__/components/AgentResponse.test.tsx","./components/ui/input.tsx","./components/ui/tooltip.tsx","./components/ChatInterfaceClient.tsx","./__tests__/components/ChatInterfaceClient.test.tsx","./__tests__/hooks/use-media-query.test.tsx","./app/chat-interface.tsx","./app/head.tsx","./node_modules/next/dist/compiled/@next/font/dist/types.d.ts","./node_modules/next/dist/compiled/@next/font/dist/google/index.d.ts","./node_modules/next/font/google/index.d.ts","./components/Navigation.tsx","./app/layout.tsx","./components/ui/gradient-button.tsx","./app/not-found.tsx","./node_modules/simplex-noise/dist/esm/simplex-noise.d.ts","./components/ui/wavy-background.tsx","./app/page.tsx","./app/about/page.tsx","./app/account/page.tsx","./app/chat/error.tsx","./app/chat/layout.tsx","./app/chat/loading.tsx","./app/chat/page.tsx","./app/login/page.tsx","./components/ui/context-menu.tsx","./components/MessageContextMenu.tsx","./components/PageTransition.tsx","./components/ui/glass-card.tsx","./node_modules/@radix-ui/react-label/dist/index.d.ts","./components/ui/label.tsx","./.next/types/app/layout.ts","./.next/types/app/page.ts","./.next/types/app/about/page.ts","./.next/types/app/account/page.ts","./.next/types/app/api/chat/route.ts","./.next/types/app/chat/layout.ts","./.next/types/app/chat/page.ts","./.next/types/app/login/page.ts","./node_modules/@babel/types/lib/index.d.ts","./node_modules/@types/babel__generator/index.d.ts","./node_modules/@babel/parser/typings/babel-parser.d.ts","./node_modules/@types/babel__template/index.d.ts","./node_modules/@types/babel__traverse/index.d.ts","./node_modules/@types/babel__core/index.d.ts","./node_modules/@types/cookie/index.d.ts","./node_modules/@types/graceful-fs/index.d.ts","./node_modules/@types/istanbul-lib-coverage/index.d.ts","./node_modules/@types/istanbul-lib-report/index.d.ts","./node_modules/@types/istanbul-reports/index.d.ts","./node_modules/parse5/dist/common/html.d.ts","./node_modules/parse5/dist/common/token.d.ts","./node_modules/parse5/dist/common/error-codes.d.ts","./node_modules/parse5/dist/tokenizer/preprocessor.d.ts","./node_modules/entities/lib/generated/decode-data-html.d.ts","./node_modules/entities/lib/generated/decode-data-xml.d.ts","./node_modules/entities/lib/decode_codepoint.d.ts","./node_modules/entities/lib/decode.d.ts","./node_modules/parse5/dist/tokenizer/index.d.ts","./node_modules/parse5/dist/tree-adapters/interface.d.ts","./node_modules/parse5/dist/parser/open-element-stack.d.ts","./node_modules/parse5/dist/parser/formatting-element-list.d.ts","./node_modules/parse5/dist/parser/index.d.ts","./node_modules/parse5/dist/tree-adapters/default.d.ts","./node_modules/parse5/dist/serializer/index.d.ts","./node_modules/parse5/dist/common/foreign-content.d.ts","./node_modules/parse5/dist/index.d.ts","./node_modules/@types/tough-cookie/index.d.ts","./node_modules/@types/jsdom/base.d.ts","./node_modules/@types/jsdom/index.d.ts","./node_modules/@types/json5/index.d.ts","./node_modules/@types/stack-utils/index.d.ts","./node_modules/@types/statuses/index.d.ts","./node_modules/@types/yargs-parser/index.d.ts","./node_modules/@types/yargs/index.d.ts"],"fileIdsList":[[95,137,267,421],[95,137,267,422],[95,137,322,330],[95,137,267,424],[95,137,267,426],[95,137,267,415],[95,137,267,427],[95,137,267,420],[83,95,137,394,402],[83,95,137,394,406],[95,137,332,394],[95,137],[95,137,396,416,419],[95,137,322,328,329],[95,137,406],[83,95,137,396],[95,137,325],[95,137,396],[95,137,325,413,414],[83,95,137,302,396,404,416,419],[95,137,302,416],[95,137,302,396,416,419],[83,95,137,395,396,401],[83,95,137,332,345,395,396,401,402,404,405],[95,137,347,396,428],[95,137,302,311,396],[95,137,395],[83,95,137,345,398,400],[83,95,137,345,372,373],[95,137,345],[83,95,137,345,398],[83,95,137,345],[83,95,137,345,400,432],[83,95,137,345,368,373],[83,95,137,345,418],[83,95,137],[95,137,322,328],[95,137,322],[95,137,334,344],[95,137,325,326],[95,137,442],[95,137,350],[83,95,137,362],[83,95,137,361,362,371],[83,95,137,361,362,363,366,367,369,370],[83,95,137,361,362,364,365],[83,95,137,361,362],[83,95,137,397],[83,95,137,361,362,363,366,367],[95,137,380],[95,137,377,378,379,380,381,384,385,386,387,388,389,390,391],[95,137,376],[95,137,383],[95,137,377,378,379],[95,137,377,378],[95,137,380,381,383],[95,137,378],[95,137,392,393],[95,137,442,443,444,445,446],[95,137,442,444],[95,137,150,186],[95,137,450],[95,137,451],[95,137,352,355,359],[95,137,351],[95,137,149,182,186,469,470,472],[95,137,471],[95,134,137],[95,136,137],[137],[95,137,142,171],[95,137,138,143,149,150,157,168,179],[95,137,138,139,149,157],[90,91,92,95,137],[95,137,140,180],[95,137,141,142,150,158],[95,137,142,168,176],[95,137,143,145,149,157],[95,136,137,144],[95,137,145,146],[95,137,149],[95,137,147,149],[95,136,137,149],[95,137,149,150,151,168,179],[95,137,149,150,151,164,168,171],[95,132,137,184],[95,137,145,149,152,157,168,179],[95,137,149,150,152,153,157,168,176,179],[95,137,152,154,168,176,179],[93,94,95,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185],[95,137,149,155],[95,137,156,179,184],[95,137,145,149,157,168],[95,137,158],[95,137,159],[95,136,137,160],[95,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185],[95,137,162],[95,137,163],[95,137,149,164,165],[95,137,164,166,180,182],[95,137,149,168,169,170,171],[95,137,168,170],[95,137,168,169],[95,137,171],[95,137,172],[95,134,137,168],[95,137,149,174,175],[95,137,174,175],[95,137,142,157,168,176],[95,137,177],[95,137,157,178],[95,137,152,163,179],[95,137,142,180],[95,137,168,181],[95,137,156,182],[95,137,183],[95,137,142,149,151,160,168,179,182,184],[95,137,168,185],[83,95,137,190,191,192],[83,95,137,190,191],[83,95,137,393],[83,87,95,137,189,268,319,374],[83,87,95,137,188,268,319,374],[80,81,82,95,137],[95,137,355,357,358],[95,137,476],[95,137,334,399],[95,137,334],[95,137,457,458,459],[95,137,348,354],[95,137,352],[95,137,349,353],[88,95,137],[95,137,281],[95,137,283,284,285],[95,137,287],[95,137,195,204,214,268],[95,137,195,202,206],[95,137,213,324],[95,137,324],[95,137,213,214,324],[95,137,303,304,305,309],[95,137,228],[95,137,306,308],[83,95,137,306,307,309],[95,136,137,186,205,220,221],[83,95,137,196,297],[83,95,137,179,186],[83,95,137,213,274],[83,95,137,213],[95,137,272,277],[83,95,137,273,280],[95,137,411],[83,95,137,168,186,319],[83,87,95,137,152,186,188,189,268,317,318,374],[95,137,194],[95,137,261,262,263,264,265,266],[95,137,263],[83,95,137,269,280],[83,95,137,280],[95,137,152,186,205,280],[83,95,137,163,186,204,220,241,243,245,268,324],[95,137,152,186,204,206],[95,137,152,168,186,203,205,206,268],[95,137,152,163,179,186,194,196,203,204,205,206,213,217,219,220,224,225,233,235,237,240,241,243,244,245,246,249,252,254,268],[95,137,152,168,186],[95,137,195,196,197,203,268,280,324],[95,137,204],[95,137,163,179,186,201,203,205,220,232,233,237,238,239,243,252,255,257,258],[95,137,204,208,220],[95,137,203,204],[95,137,225,253],[95,137,199,200],[95,137,199,247],[95,137,199],[95,137,201,225,251],[95,137,250],[95,137,200,201],[95,137,201,248],[95,137,200],[95,137,152,179,186,196,203,204,219],[95,137,217,219,280],[95,137,187,241,242,268,280],[95,137,152,163,179,186,201,203,205,208,215,217,219,220,224,232,233,235,237,238,239,240,243,246,249,255,256,280],[95,137,152,186,203,204,208,257,259],[95,137,222,223],[83,95,137,152,163,186,194,196,203,206,224,240,241,243,245,268,280],[95,137,152,163,179,186,198,201,202,205],[95,137,218],[95,137,152,186,224],[95,137,152,186,224,234],[95,137,152,186,205,235],[95,137,152,186,204,225],[95,137,227],[95,137,229],[95,137,320],[95,137,204,226,228,232],[95,137,204,226,228],[95,137,152,186,198,204,205,229,230,231],[83,95,137,306,307,308],[95,137,278],[83,95,137,196],[83,95,137,187,240,245,268,280],[95,137,196,297,298],[83,95,137,163,179,186,194,271,273,275,276,280],[95,137,205,213,237],[95,137,163,186],[95,137,236],[83,95,137,152,163,186,194,268,269,270,277,279],[79,83,84,85,86,95,137,188,189,268,319,374],[95,137,289],[95,137,291],[95,137,293],[95,137,412],[95,137,295],[95,137,299],[87,89,95,137,268,282,286,288,290,292,294,296,300,302,311,312,314,322,323,324],[95,137,301],[95,137,310],[95,137,273],[95,137,313],[95,136,137,229,230,231,232,315,316,319,321],[95,137,186],[83,87,95,137,152,154,163,186,188,189,190,192,194,206,260,267,280,319,374],[95,137,454],[95,137,453,454],[95,137,453],[95,137,453,454,455,461,462,465,466,467,468],[95,137,454,462],[95,137,453,454,455,461,462,463,464],[95,137,453,462],[95,137,462,466],[95,137,454,455,456,460],[95,137,455],[95,137,453,454,462],[95,137,382],[95,137,335,336,337,338,339,340,341,342,343],[95,137,335,336],[95,137,336,338],[95,137,336],[95,137,335],[95,104,108,137,179],[95,104,137,168,179],[95,99,137],[95,101,104,137,176,179],[95,137,157,176],[95,99,137,186],[95,101,104,137,157,179],[95,96,97,100,103,137,149,168,179],[95,104,111,137],[95,96,102,137],[95,104,125,126,137],[95,100,104,137,171,179,186],[95,125,137,186],[95,98,99,137,186],[95,104,137],[95,98,99,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,130,131,137],[95,104,119,137],[95,104,111,112,137],[95,102,104,112,113,137],[95,103,137],[95,96,99,104,137],[95,104,108,112,113,137],[95,108,137],[95,102,104,107,137,179],[95,96,101,104,111,137],[95,137,168],[95,99,104,125,137,184,186],[95,137,359],[95,137,368,372,373],[83,87,95,137,188,189,268,319]],"fileInfos":[{"version":"e41c290ef7dd7dab3493e6cbe5909e0148edf4a8dad0271be08edec368a0f7b9","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"e44bb8bbac7f10ecc786703fe0a6a4b952189f908707980ba8f3c8975a760962","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569","impliedFormat":1},{"version":"ee7bad0c15b58988daa84371e0b89d313b762ab83cb5b31b8a2d1162e8eb41c2","impliedFormat":1},{"version":"27bdc30a0e32783366a5abeda841bc22757c1797de8681bbe81fbc735eeb1c10","impliedFormat":1},{"version":"8fd575e12870e9944c7e1d62e1f5a73fcf23dd8d3a321f2a2c74c20d022283fe","impliedFormat":1},{"version":"e12a46ce14b817d4c9e6b2b478956452330bf00c9801b79de46f7a1815b5bd40","impliedFormat":1},{"version":"4fd3f3422b2d2a3dfd5cdd0f387b3a8ec45f006c6ea896a4cb41264c2100bb2c","affectsGlobalScope":true,"impliedFormat":1},{"version":"69e65d976bf166ce4a9e6f6c18f94d2424bf116e90837ace179610dbccad9b42","affectsGlobalScope":true,"impliedFormat":1},{"version":"c57796738e7f83dbc4b8e65132f11a377649c00dd3eee333f672b8f0a6bea671","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"62bb211266ee48b2d0edf0d8d1b191f0c24fc379a82bd4c1692a082c540bc6b1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"936e80ad36a2ee83fc3caf008e7c4c5afe45b3cf3d5c24408f039c1d47bdc1df","affectsGlobalScope":true,"impliedFormat":1},{"version":"d15bea3d62cbbdb9797079416b8ac375ae99162a7fba5de2c6c505446486ac0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"68d18b664c9d32a7336a70235958b8997ebc1c3b8505f4f1ae2b7e7753b87618","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb3d66c8327153d8fa7dd03f9c58d351107fe824c79e9b56b462935176cdf12a","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"fef8cfad2e2dc5f5b3d97a6f4f2e92848eb1b88e897bb7318cef0e2820bceaab","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"954296b30da6d508a104a3a0b5d96b76495c709785c1d11610908e63481ee667","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"f1e2a172204962276504466a6393426d2ca9c54894b1ad0a6c9dad867a65f876","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"52ada8e0b6e0482b728070b7639ee42e83a9b1c22d205992756fe020fd9f4a47","affectsGlobalScope":true,"impliedFormat":1},{"version":"3bdefe1bfd4d6dee0e26f928f93ccc128f1b64d5d501ff4a8cf3c6371200e5e6","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"639e512c0dfc3fad96a84caad71b8834d66329a1f28dc95e3946c9b58176c73a","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true,"impliedFormat":1},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true,"impliedFormat":1},{"version":"959d36cddf5e7d572a65045b876f2956c973a586da58e5d26cde519184fd9b8a","affectsGlobalScope":true,"impliedFormat":1},{"version":"965f36eae237dd74e6cca203a43e9ca801ce38824ead814728a2807b1910117d","affectsGlobalScope":true,"impliedFormat":1},{"version":"3925a6c820dcb1a06506c90b1577db1fdbf7705d65b62b99dce4be75c637e26b","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a3d63ef2b853447ec4f749d3f368ce642264246e02911fcb1590d8c161b8005","affectsGlobalScope":true,"impliedFormat":1},{"version":"b5ce7a470bc3628408429040c4e3a53a27755022a32fd05e2cb694e7015386c7","affectsGlobalScope":true,"impliedFormat":1},{"version":"8444af78980e3b20b49324f4a16ba35024fef3ee069a0eb67616ea6ca821c47a","affectsGlobalScope":true,"impliedFormat":1},{"version":"3287d9d085fbd618c3971944b65b4be57859f5415f495b33a6adc994edd2f004","affectsGlobalScope":true,"impliedFormat":1},{"version":"b4b67b1a91182421f5df999988c690f14d813b9850b40acd06ed44691f6727ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"bab26767638ab3557de12c900f0b91f710c7dc40ee9793d5a27d32c04f0bf646","affectsGlobalScope":true,"impliedFormat":1},{"version":"436aaf437562f276ec2ddbee2f2cdedac7664c1e4c1d2c36839ddd582eeb3d0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e3c06ea092138bf9fa5e874a1fdbc9d54805d074bee1de31b99a11e2fec239d","affectsGlobalScope":true,"impliedFormat":1},{"version":"87dc0f382502f5bbce5129bdc0aea21e19a3abbc19259e0b43ae038a9fc4e326","affectsGlobalScope":true,"impliedFormat":1},{"version":"b1cb28af0c891c8c96b2d6b7be76bd394fddcfdb4709a20ba05a7c1605eea0f9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2fef54945a13095fdb9b84f705f2b5994597640c46afeb2ce78352fab4cb3279","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac77cb3e8c6d3565793eb90a8373ee8033146315a3dbead3bde8db5eaf5e5ec6","affectsGlobalScope":true,"impliedFormat":1},{"version":"56e4ed5aab5f5920980066a9409bfaf53e6d21d3f8d020c17e4de584d29600ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ece9f17b3866cc077099c73f4983bddbcb1dc7ddb943227f1ec070f529dedd1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a6282c8827e4b9a95f4bf4f5c205673ada31b982f50572d27103df8ceb8013c","affectsGlobalScope":true,"impliedFormat":1},{"version":"1c9319a09485199c1f7b0498f2988d6d2249793ef67edda49d1e584746be9032","affectsGlobalScope":true,"impliedFormat":1},{"version":"e3a2a0cee0f03ffdde24d89660eba2685bfbdeae955a6c67e8c4c9fd28928eeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true,"impliedFormat":1},{"version":"51ad4c928303041605b4d7ae32e0c1ee387d43a24cd6f1ebf4a2699e1076d4fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"d4b1d2c51d058fc21ec2629fff7a76249dec2e36e12960ea056e3ef89174080f","affectsGlobalScope":true,"impliedFormat":1},{"version":"61d6a2092f48af66dbfb220e31eea8b10bc02b6932d6e529005fd2d7b3281290","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e7f8264d0fb4c5339605a15daadb037bf238c10b654bb3eee14208f860a32ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"0990a7576222f248f0a3b888adcb7389f957928ce2afb1cd5128169086ff4d29","impliedFormat":1},{"version":"36a2e4c9a67439aca5f91bb304611d5ae6e20d420503e96c230cf8fcdc948d94","affectsGlobalScope":true,"impliedFormat":1},{"version":"8a8eb4ebffd85e589a1cc7c178e291626c359543403d58c9cd22b81fab5b1fb9","impliedFormat":1},{"version":"65ff5a0aefd7817a03c1ad04fee85c9cdd3ec415cc3c9efec85d8008d4d5e4ee","impliedFormat":1},{"version":"b89c2ddec6bd955e8721d41e24ca667de06882338d88b183c2cdc1f41f4c5a34","affectsGlobalScope":true,"impliedFormat":1},{"version":"cc69795d9954ee4ad57545b10c7bf1a7260d990231b1685c147ea71a6faa265c","impliedFormat":1},{"version":"8bc6c94ff4f2af1f4023b7bb2379b08d3d7dd80c698c9f0b07431ea16101f05f","impliedFormat":1},{"version":"1b61d259de5350f8b1e5db06290d31eaebebc6baafd5f79d314b5af9256d7153","impliedFormat":1},{"version":"57194e1f007f3f2cbef26fa299d4c6b21f4623a2eddc63dfeef79e38e187a36e","impliedFormat":1},{"version":"0f6666b58e9276ac3a38fdc80993d19208442d6027ab885580d93aec76b4ef00","impliedFormat":1},{"version":"05fd364b8ef02fb1e174fbac8b825bdb1e5a36a016997c8e421f5fab0a6da0a0","impliedFormat":1},{"version":"70521b6ab0dcba37539e5303104f29b721bfb2940b2776da4cc818c07e1fefc1","affectsGlobalScope":true,"impliedFormat":1},{"version":"ab41ef1f2cdafb8df48be20cd969d875602483859dc194e9c97c8a576892c052","affectsGlobalScope":true,"impliedFormat":1},{"version":"d153a11543fd884b596587ccd97aebbeed950b26933ee000f94009f1ab142848","affectsGlobalScope":true,"impliedFormat":1},{"version":"21d819c173c0cf7cc3ce57c3276e77fd9a8a01d35a06ad87158781515c9a438a","impliedFormat":1},{"version":"a79e62f1e20467e11a904399b8b18b18c0c6eea6b50c1168bf215356d5bebfaf","affectsGlobalScope":true,"impliedFormat":1},{"version":"0fd06258805d26c72f5997e07a23155d322d5f05387adb3744a791fe6a0b042d","affectsGlobalScope":true,"impliedFormat":1},{"version":"5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","impliedFormat":1},{"version":"24bd580b5743dc56402c440dc7f9a4f5d592ad7a419f25414d37a7bfe11e342b","impliedFormat":1},{"version":"25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","impliedFormat":1},{"version":"c464d66b20788266e5353b48dc4aa6bc0dc4a707276df1e7152ab0c9ae21fad8","impliedFormat":1},{"version":"78d0d27c130d35c60b5e5566c9f1e5be77caf39804636bc1a40133919a949f21","impliedFormat":1},{"version":"c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","impliedFormat":1},{"version":"1d6e127068ea8e104a912e42fc0a110e2aa5a66a356a917a163e8cf9a65e4a75","impliedFormat":1},{"version":"5ded6427296cdf3b9542de4471d2aa8d3983671d4cac0f4bf9c637208d1ced43","impliedFormat":1},{"version":"6bdc71028db658243775263e93a7db2fd2abfce3ca569c3cca5aee6ed5eb186d","impliedFormat":1},{"version":"cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","impliedFormat":1},{"version":"385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","impliedFormat":1},{"version":"9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","impliedFormat":1},{"version":"0b8a9268adaf4da35e7fa830c8981cfa22adbbe5b3f6f5ab91f6658899e657a7","impliedFormat":1},{"version":"11396ed8a44c02ab9798b7dca436009f866e8dae3c9c25e8c1fbc396880bf1bb","impliedFormat":1},{"version":"ba7bc87d01492633cb5a0e5da8a4a42a1c86270e7b3d2dea5d156828a84e4882","impliedFormat":1},{"version":"4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","impliedFormat":1},{"version":"c21dc52e277bcfc75fac0436ccb75c204f9e1b3fa5e12729670910639f27343e","impliedFormat":1},{"version":"13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","impliedFormat":1},{"version":"9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","impliedFormat":1},{"version":"4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","impliedFormat":1},{"version":"24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","impliedFormat":1},{"version":"ea0148f897b45a76544ae179784c95af1bd6721b8610af9ffa467a518a086a43","impliedFormat":1},{"version":"24c6a117721e606c9984335f71711877293a9651e44f59f3d21c1ea0856f9cc9","impliedFormat":1},{"version":"dd3273ead9fbde62a72949c97dbec2247ea08e0c6952e701a483d74ef92d6a17","impliedFormat":1},{"version":"405822be75ad3e4d162e07439bac80c6bcc6dbae1929e179cf467ec0b9ee4e2e","impliedFormat":1},{"version":"0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","impliedFormat":1},{"version":"4d2b0eb911816f66abe4970898f97a2cfc902bcd743cbfa5017fad79f7ef90d8","impliedFormat":1},{"version":"bd0532fd6556073727d28da0edfd1736417a3f9f394877b6d5ef6ad88fba1d1a","impliedFormat":1},{"version":"89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","impliedFormat":1},{"version":"e53a3c2a9f624d90f24bf4588aacd223e7bec1b9d0d479b68d2f4a9e6011147f","impliedFormat":1},{"version":"24b8685c62562f5d98615c5a0c1d05f297cf5065f15246edfe99e81ec4c0e011","impliedFormat":1},{"version":"93507c745e8f29090efb99399c3f77bec07db17acd75634249dc92f961573387","impliedFormat":1},{"version":"339dc5265ee5ed92e536a93a04c4ebbc2128f45eeec6ed29f379e0085283542c","impliedFormat":1},{"version":"4732aec92b20fb28c5fe9ad99521fb59974289ed1e45aecb282616202184064f","impliedFormat":1},{"version":"2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","impliedFormat":1},{"version":"c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","impliedFormat":1},{"version":"bf67d53d168abc1298888693338cb82854bdb2e69ef83f8a0092093c2d562107","impliedFormat":1},{"version":"ca6d304b929748ea15c33f28c1f159df18a94470b424ab78c52d68d40a41e1e9","affectsGlobalScope":true,"impliedFormat":1},{"version":"a72ffc815104fb5c075106ebca459b2d55d07862a773768fce89efc621b3964b","impliedFormat":1},{"version":"7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","impliedFormat":1},{"version":"3d77c73be94570813f8cadd1f05ebc3dc5e2e4fdefe4d340ca20cd018724ee36","impliedFormat":1},{"version":"d674383111e06b6741c4ad2db962131b5b0fa4d0294b998566c635e86195a453","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3e58c4c18a031cbb17abec7a4ad0bd5ae9fc70c1f4ba1e7fb921ad87c504aca","impliedFormat":1},{"version":"a3e8bafb2af8e850c644f4be7f5156cf7d23b7bfdc3b786bd4d10ed40329649c","impliedFormat":1},{"version":"35ec8b6760fd7138bbf5809b84551e31028fb2ba7b6dc91d95d098bf212ca8b4","affectsGlobalScope":true,"impliedFormat":1},{"version":"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","impliedFormat":1},{"version":"f77d9188e41291acf14f476e931972460a303e1952538f9546e7b370cb8d0d20","affectsGlobalScope":true,"impliedFormat":1},{"version":"b0c0d1d13be149f790a75b381b413490f98558649428bb916fd2d71a3f47a134","impliedFormat":1},{"version":"3c884d9d9ec454bdf0d5a0b8465bf8297d2caa4d853851d92cc417ac6f30b969","impliedFormat":1},{"version":"5a369483ac4cfbdf0331c248deeb36140e6907db5e1daed241546b4a2055f82c","impliedFormat":1},{"version":"e8f5b5cc36615c17d330eaf8eebbc0d6bdd942c25991f96ef122f246f4ff722f","impliedFormat":1},{"version":"f0bd7e6d931657b59605c44112eaf8b980ba7f957a5051ed21cb93d978cf2f45","impliedFormat":1},{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true,"impliedFormat":1},{"version":"0ada07543808f3b967624645a8e1ccd446f8b01ade47842acf1328aec899fed0","affectsGlobalScope":true,"impliedFormat":1},{"version":"a4bdde4e601e9554a844e1e0d0ccfa05e183ef9d82ab3ac25f17c1709033d360","impliedFormat":1},{"version":"ad23fd126ff06e72728dd7bfc84326a8ca8cec2b9d2dac0193d42a777df0e7d8","impliedFormat":1},{"version":"c60db41f7bee80fb80c0b12819f5e465c8c8b465578da43e36d04f4a4646f57d","impliedFormat":1},{"version":"93bd413918fa921c8729cef45302b24d8b6c7855d72d5bf82d3972595ae8dcbf","impliedFormat":1},{"version":"4ff41188773cbf465807dd2f7059c7494cbee5115608efc297383832a1150c43","impliedFormat":1},{"version":"dccdf1677e531e33f8ac961a68bc537418c9a414797c1ea7e91307501cdc3f5e","impliedFormat":1},{"version":"1f4fc6905c4c3ae701838f89484f477b8d9b3ef39270e016b5488600d247d9a5","affectsGlobalScope":true,"impliedFormat":1},{"version":"d206b4baf4ddcc15d9d69a9a2f4999a72a2c6adeaa8af20fa7a9960816287555","impliedFormat":1},{"version":"93f437e1398a4f06a984f441f7fa7a9f0535c04399619b5c22e0b87bdee182cb","impliedFormat":1},{"version":"afbe24ab0d74694372baa632ecb28bb375be53f3be53f9b07ecd7fc994907de5","impliedFormat":1},{"version":"70731d10d5311bd4cf710ef7f6539b62660f4b0bfdbb3f9fbe1d25fe6366a7fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"a20f1e119615bf7632729fd89b6c0b5ffdc2df3b512d6304146294528e3ebe19","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e043a1bc8fbf2a255bccf9bf27e0f1caf916c3b0518ea34aa72357c0afd42ec","impliedFormat":1},{"version":"137c2894e8f3e9672d401cc0a305dc7b1db7c69511cf6d3970fb53302f9eae09","impliedFormat":1},{"version":"3bc2f1e2c95c04048212c569ed38e338873f6a8593930cf5a7ef24ffb38fc3b6","impliedFormat":1},{"version":"8145e07aad6da5f23f2fcd8c8e4c5c13fb26ee986a79d03b0829b8fce152d8b2","impliedFormat":1},{"version":"f9d9d753d430ed050dc1bf2667a1bab711ccbb1c1507183d794cc195a5b085cc","impliedFormat":1},{"version":"9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","impliedFormat":1},{"version":"235bfb54b4869c26f7e98e3d1f68dbfc85acf4cf5c38a4444a006fbf74a8a43d","impliedFormat":1},{"version":"37ba7b45141a45ce6e80e66f2a96c8a5ab1bcef0fc2d0f56bb58df96ec67e972","impliedFormat":1},{"version":"93452d394fdd1dc551ec62f5042366f011a00d342d36d50793b3529bfc9bd633","impliedFormat":1},{"version":"bb715efb4857eb94539eafb420352105a0cff40746837c5140bf6b035dd220ba","affectsGlobalScope":true,"impliedFormat":1},{"version":"1851a3b4db78664f83901bb9cac9e45e03a37bb5933cc5bf37e10bb7e91ab4eb","impliedFormat":1},{"version":"fdedf82878e4c744bc2a1c1e802ae407d63474da51f14a54babe039018e53d8f","affectsGlobalScope":true,"impliedFormat":1},{"version":"08353b04a3501d84fc8d7b49de99f6c1cc26026e6d9d697a18315f3bfe92ed03","affectsGlobalScope":true,"impliedFormat":1},{"version":"578d8bb6dcb2a1c03c4c3f8eb71abc9677e1a5c788b7f24848e3138ce17f3400","impliedFormat":1},{"version":"4f029899f9bae07e225c43aef893590541b2b43267383bf5e32e3a884d219ed5","impliedFormat":1},{"version":"ae56f65caf3be91108707bd8dfbccc2a57a91feb5daabf7165a06a945545ed26","impliedFormat":1},{"version":"a136d5de521da20f31631a0a96bf712370779d1c05b7015d7019a9b2a0446ca9","impliedFormat":1},{"version":"5b566927cad2ed2139655d55d690ffa87df378b956e7fe1c96024c4d9f75c4cf","affectsGlobalScope":true,"impliedFormat":1},{"version":"bce947017cb7a2deebcc4f5ba04cead891ce6ad1602a4438ae45ed9aa1f39104","affectsGlobalScope":true,"impliedFormat":1},{"version":"d3dffd70e6375b872f0b4e152de4ae682d762c61a24881ecc5eb9f04c5caf76f","impliedFormat":1},{"version":"e2c72c065a36bc9ab2a00ac6a6f51e71501619a72c0609defd304d46610487a4","impliedFormat":1},{"version":"d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c","impliedFormat":1},{"version":"616075a6ac578cf5a013ee12964188b4412823796ce0b202c6f1d2e4ca8480d7","affectsGlobalScope":true,"impliedFormat":1},{"version":"e8a979b8af001c9fc2e774e7809d233c8ca955a28756f52ee5dee88ccb0611d2","impliedFormat":1},{"version":"cac793cc47c29e26e4ac3601dcb00b4435ebed26203485790e44f2ad8b6ad847","impliedFormat":1},{"version":"8caa5c86be1b793cd5f599e27ecb34252c41e011980f7d61ae4989a149ff6ccc","impliedFormat":1},{"version":"3609e455ffcba8176c8ce0aa57f8258fe10cf03987e27f1fab68f702b4426521","impliedFormat":1},{"version":"d1bd4e51810d159899aad1660ccb859da54e27e08b8c9862b40cd36c1d9ff00f","impliedFormat":1},{"version":"17ed71200119e86ccef2d96b73b02ce8854b76ad6bd21b5021d4269bec527b5f","impliedFormat":1},{"version":"5dbf2a502a7fcd85bfe753b585cfc6c9f60294570ee6a18084e574cf93be3fa0","impliedFormat":1},{"version":"bb7a61dd55dc4b9422d13da3a6bb9cc5e89be888ef23bbcf6558aa9726b89a1c","impliedFormat":1},{"version":"db6d2d9daad8a6d83f281af12ce4355a20b9a3e71b82b9f57cddcca0a8964a96","impliedFormat":1},{"version":"eb4b9a746cc7326485e091731e98708acf669c314348c72a88f8ed7a684c719e","impliedFormat":1},{"version":"cbea99888785d49bb630dcbb1613c73727f2b5a2cf02e1abcaab7bcf8d6bf3c5","impliedFormat":1},{"version":"a3f1220f5331589384d77ed650001719baac21fcbed91e36b9abc5485b06335a","impliedFormat":1},{"version":"a86f82d646a739041d6702101afa82dcb935c416dd93cbca7fd754fd0282ce1f","impliedFormat":1},{"version":"6ceac05c32f579adbed2f1a9c98cd297de3c00a3caaffc423385d00e82bce4ce","impliedFormat":1},{"version":"fa5bbc7ab4130dd8cdc55ea294ec39f76f2bc507a0f75f4f873e38631a836ca7","impliedFormat":1},{"version":"abb8aec2e3346d3ad3ad7d050306e86b09e6baeff73e420058ac9f72b9a6f9a1","impliedFormat":1},{"version":"cf86de1054b843e484a3c9300d62fbc8c97e77f168bbffb131d560ca0474d4a8","impliedFormat":1},{"version":"37f7b8e560025858aae5195ca74a3e95ecd55591e2babc0acd57bc1dab4ea8ea","impliedFormat":1},{"version":"24687523374b3ee67cd2499475dde9f08dd9a254a020dd06b4251761ab30834c","impliedFormat":1},{"version":"737c6894652288d1f9c7a215679a20f5695ba66e48524c758ff681441285b5eb","impliedFormat":1},{"version":"0105d7eb0f10cd23c976651fdc9ed0ea3af1a7fc159db24a7a6bc97b1a0b081f","impliedFormat":1},{"version":"b7b3258e8d47333721f9d4c287361d773f8fa88e52d1148812485d9fc06d2577","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"49e567e0aa388ab416eeb7a7de9bce5045a7b628bad18d1f6fa9d3eacee7bc3f","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"8a8bf772f83e9546b61720cf3b9add9aa4c2058479ad0d8db0d7c9fd948c4eaf","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"eed041005bb5e595e276684cb5ed194ab19205504f4cd0e41de754a622f22964","impliedFormat":1},{"version":"aeb888c84e570f3aea036de32da9b6f2c0ab204af27cb550753e897598ac63e0","impliedFormat":1},{"version":"4c91cc1ab59b55d880877ccf1999ded0bb2ebc8e3a597c622962d65bf0e76be8","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"e1c9c204454567f39c3fdcb102871ccb750f44899dfbe29df3404f4da94d647f","impliedFormat":1},{"version":"2d0fe1768fcbed8a61709d1deebcd1bd21b1b4fc42cd233e1c335e1432d58aa9","impliedFormat":1},{"version":"3cd0346fc79e262233785d9fe2cbad08fc3fe6339af3419791687152ddfe5596","impliedFormat":1},{"version":"ccc2b7e6bc181b89049fd416f286d09545c685a817e2230ca938fcec023f8c4f","impliedFormat":1},{"version":"d23518a5f155f1a3e07214baf0295687507122ae2e6e9bd5e772551ebd4b3157","impliedFormat":1},{"version":"a10a30ba2af182e5aa8853f8ce8be340ae39b2ceb838870cbaec823e370130b6","impliedFormat":1},{"version":"3ed9d1af009869ce794e56dca77ac5241594f94c84b22075568e61e605310651","impliedFormat":1},{"version":"b91a6adb984ad2e58316bdee7c4a81aac2f6aabac525b377a03e02bdc5d31baa","impliedFormat":1},{"version":"e8da637cbd6ed1cf6c36e9424f6bcee4515ca2c677534d4006cbd9a05f930f0c","impliedFormat":1},{"version":"ca1b882a105a1972f82cc58e3be491e7d750a1eb074ffd13b198269f57ed9e1b","impliedFormat":1},{"version":"9214131d35f51d70cb3bddc3fd4f7c172d9dc4f7b7d512a1d371ed72e120a3c4","impliedFormat":1},{"version":"3867ca0e9757cc41e04248574f4f07b8f9e3c0c2a796a5eb091c65bfd2fc8bdb","impliedFormat":1},{"version":"6c66f6f7d9ff019a644ff50dd013e6bf59be4bf389092948437efa6b77dc8f9a","impliedFormat":1},{"version":"58902668adae2e5eb67efbccb4048afa02308fa684f1a4e4c7d47668ecf58c1b","impliedFormat":1},{"version":"ef2d1bd01d144d426b72db3744e7a6b6bb518a639d5c9c8d86438fb75a3b1934","impliedFormat":1},{"version":"b9750fe7235da7d8bf75cb171bf067b7350380c74271d3f80f49aea7466b55b5","impliedFormat":1},{"version":"476c48dfa7aef1b279542a1d90018f67912b3c970e147b77c2d8063c40c06b24","impliedFormat":1},{"version":"17937316a2f7f362dd6375251a9ce9e4960cfdc0aa7ba6cbd00656f7ab92334b","impliedFormat":1},{"version":"be2d91ce0cef98ac6a467d0b48813d78ae0a54d5f1a994afb16018a6b45f711d","impliedFormat":1},{"version":"973b59a17aaa817eb205baf6c132b83475a5c0a44e8294a472af7793b1817e89","impliedFormat":1},{"version":"ada39cbb2748ab2873b7835c90c8d4620723aedf323550e8489f08220e477c7f","impliedFormat":1},{"version":"a7a92f071d6891b2fa6542e343bdebc819492e6e14db37563bb71b8bd7e9b83f","impliedFormat":1},{"version":"6e5f5cee603d67ee1ba6120815497909b73399842254fc1e77a0d5cdc51d8c9c","impliedFormat":1},{"version":"99ace27cc2c78ef0fe3f92f11164eca7494b9f98a49ee0a19ede0a4c82a6a800","impliedFormat":1},{"version":"c89845d0f0fe40e7f8c423645f1577b91b6d67790eb6f394eb66779035f3a52e","impliedFormat":1},{"version":"ef61792acbfa8c27c9bd113f02731e66229f7d3a169e3c1993b508134f1a58e0","impliedFormat":1},{"version":"609e9dc4bb74cdfd2b9c89ade164e2c4032d92e903f2cbf2ca96dd3b76158b6e","impliedFormat":1},{"version":"f6404e7837b96da3ea4d38c4f1a3812c96c9dcdf264e93d5bdb199f983a3ef4b","impliedFormat":1},{"version":"c5426dbfc1cf90532f66965a7aa8c1136a78d4d0f96d8180ecbfc11d7722f1a5","impliedFormat":1},{"version":"64ce948fc8fdf88bceeec40fa162a155e6261b2fcf8fc832abc18942f9baf7e1","impliedFormat":1},{"version":"c1ac179620434b59c1569f2964a5c7354037ac91a212a1fb281673589965c893","impliedFormat":1},{"version":"9f891dc96f3e9343c4e823ba28195fd77e59c84199696a8bdfe7b67925732409","impliedFormat":1},{"version":"bae6dd176832f6423966647382c0d7ba9e63f8c167522f09a982f086cd4e8b23","impliedFormat":1},{"version":"1364f64d2fb03bbb514edc42224abd576c064f89be6a990136774ecdd881a1da","impliedFormat":1},{"version":"741c438ec079a077b08d37d9c0466924b68e98ed47224e83fcb125c5863eb355","impliedFormat":1},{"version":"fa34a00e044e9a3a6044abdb52d38bc7877ff1d6348aa79be99774e413c2568a","impliedFormat":1},{"version":"e927c2c13c4eaf0a7f17e6022eee8519eb29ef42c4c13a31e81a611ab8c95577","impliedFormat":1},{"version":"1822b69406252b606dc1aec3231a7104ac1d456cfa2c0a9041e61061895ae348","impliedFormat":1},{"version":"22d8a396304521bf80e096c300194dde7d5b7fd8b39b06b31cafe7a4fb325b5c","impliedFormat":1},{"version":"2a36120d258dfa9e6f4a7ba709984b767741025502fb75960226675bf9968ae3","impliedFormat":1},{"version":"5edf8dc783e74d975aa99109193269279f8c66d363e24aa754c0e3b52a17c5c1","impliedFormat":1},{"version":"0ca7b4d6520e97f9394853874bc4a1574b88f815747a0f5956005ddf9742e38d","impliedFormat":1},{"version":"dacc544b815d4e54ae4e039de4ce03c0a3bcbfbcaa01cd6512c4eb6aa22a0c1d","impliedFormat":1},{"version":"78aede3751e6d5755ea9bbb6850a4dda573e41a4ca2c367e9bdf133ecb68dc54","impliedFormat":1},{"version":"a1c8542ed1189091dd39e732e4390882a9bcd15c0ca093f6e9483eba4e37573f","impliedFormat":1},{"version":"a805c88b28da817123a9e4c45ceb642ef0154c8ea41ea3dde0e64a70dde7ac5f","impliedFormat":1},{"version":"3a17f09634c50cce884721f54fd9e7b98e03ac505889c560876291fcf8a09e90","impliedFormat":1},{"version":"32531dfbb0cdc4525296648f53b2b5c39b64282791e2a8c765712e49e6461046","impliedFormat":1},{"version":"0ce1b2237c1c3df49748d61568160d780d7b26693bd9feb3acb0744a152cd86d","impliedFormat":1},{"version":"e489985388e2c71d3542612685b4a7db326922b57ac880f299da7026a4e8a117","impliedFormat":1},{"version":"ce6530262460220d8f2ac48df1e2e605dad9303af59e2a9ba5c43f4f5c0adc7f","impliedFormat":1},{"version":"70bcf469570c3b7fe46c4e0043a203364d8bc8a66f73d2a4080ae37aa86e2067","affectsGlobalScope":true,"impliedFormat":1},{"version":"fd1b9d883b9446f1e1da1e1033a6a98995c25fbf3c10818a78960e2f2917d10c","impliedFormat":1},{"version":"19252079538942a69be1645e153f7dbbc1ef56b4f983c633bf31fe26aeac32cd","impliedFormat":1},{"version":"de9d2df7663e64e3a91bf495f315a7577e23ba088f2949d5ce9ec96f44fba37d","impliedFormat":1},{"version":"c7af78a2ea7cb1cd009cfb5bdb48cd0b03dad3b54f6da7aab615c2e9e9d570c5","impliedFormat":1},{"version":"1dc574e42493e8bf9bb37be44d9e38c5bd7bbc04f884e5e58b4d69636cb192b3","impliedFormat":1},{"version":"f14c2bb33b3272bbdfeb0371eb1e337c9677cb726274cf3c4c6ea19b9447a666","affectsGlobalScope":true,"impliedFormat":1},{"version":"db01d18853469bcb5601b9fc9826931cc84cc1a1944b33cad76fd6f1e3d8c544","affectsGlobalScope":true,"impliedFormat":1},{"version":"6b8e8c0331a0c2e9fb53b8b0d346e44a8db8c788dae727a2c52f4cf3bd857f0d","impliedFormat":1},{"version":"0aa0f0184c0f9635dd1b95c178223aa262bb01ec8ac7b39c911ef2bd32b8f65b","affectsGlobalScope":true,"impliedFormat":1},{"version":"ec29be0737d39268696edcec4f5e97ce26f449fa9b7afc2f0f99a86def34a418","impliedFormat":1},{"version":"8945919709e0c6069c32ca26a675a0de90fd2ad70d5bc3ba281c628729a0c39d","impliedFormat":1},{"version":"1703cf66ae204a085d50991e0edeef1c98bb1004d6d68331eeefbcc57bd92fd3","impliedFormat":1},{"version":"edaa27d57d30467edc63e9da7e7196acd315b02071f2c7ecd8475085a5cab9a2","impliedFormat":1},{"version":"65c24a8baa2cca1de069a0ba9fba82a173690f52d7e2d0f1f7542d59d5eb4db0","impliedFormat":1},{"version":"ec9fd890d681789cb0aa9efbc50b1e0afe76fbf3c49c3ac50ff80e90e29c6bcb","impliedFormat":1},{"version":"5fbd292aa08208ae99bf06d5da63321fdc768ee43a7a104980963100a3841752","impliedFormat":1},{"version":"9eac5a6beea91cfb119688bf44a5688b129b804ede186e5e2413572a534c21bb","impliedFormat":1},{"version":"6c292de17d4e8763406421cb91f545d1634c81486d8e14fceae65955c119584e","impliedFormat":1},{"version":"b7fff2d004c5879cae335db8f954eb1d61242d9f2d28515e67902032723caeab","impliedFormat":1},{"version":"5f3dc10ae646f375776b4e028d2bed039a93eebbba105694d8b910feebbe8b9c","impliedFormat":1},{"version":"145d0d6d3e07786d18ac835cc2129c073b2a8737d05a57a7287b0de64ab08ca2","impliedFormat":1},{"version":"4545c1a1ceca170d5d83452dd7c4994644c35cf676a671412601689d9a62da35","impliedFormat":1},{"version":"15959543f93f27e8e2b1a012fe28e14b682034757e2d7a6c1f02f87107fc731e","impliedFormat":1},{"version":"a2d648d333cf67b9aeac5d81a1a379d563a8ffa91ddd61c6179f68de724260ff","impliedFormat":1},{"version":"4e828bf688597c32905215785730cbdb603b54e284d472a23fc0195c6d4aeee8","impliedFormat":1},{"version":"a3f41ed1b4f2fc3049394b945a68ae4fdefd49fa1739c32f149d32c0545d67f5","impliedFormat":1},{"version":"4da80db9ed5a1a20fd5bfce863dd178b8928bcaf4a3d75e8657bcae32e572ede","impliedFormat":1},{"version":"47699512e6d8bebf7be488182427189f999affe3addc1c87c882d36b7f2d0b0e","impliedFormat":1},{"version":"7c8ee03d9ac384b0669c5438e5f3bf6216e8f71afe9a78a5ed4639a62961cb62","impliedFormat":1},{"version":"898b714aad9cfd0e546d1ad2c031571de7622bd0f9606a499bee193cf5e7cf0c","impliedFormat":1},{"version":"09cb73020ab795df196977eee9f4531614109f07c943bdbe55a9cf858c83dc34","impliedFormat":1},{"version":"fedebeae32c5cdd1a85b4e0504a01996e4a8adf3dfa72876920d3dd6e42978e7","impliedFormat":1},{"version":"004e2ddb267cf59659a8a7f5422dbc1af78a3ce711d6fab490a857ce34730575","impliedFormat":1},{"version":"cdf21eee8007e339b1b9945abf4a7b44930b1d695cc528459e68a3adc39a622e","impliedFormat":1},{"version":"2e4f37ffe8862b14d8e24ae8763daaa8340c0df0b859d9a9733def0eee7562d9","impliedFormat":1},{"version":"e0aa1079d58134e55ad2f73508ad1be565a975f2247245d76c64c1ca9e5e5b26","impliedFormat":1},{"version":"cd0c5af42811a4a56a0f77856cfa6c170278e9522888db715b11f176df3ff1f2","impliedFormat":1},{"version":"3dbf19422de170c2050d39dd7fc4bc7c2dd18fcc849a4cf24058596d8b0ceba8","impliedFormat":1},{"version":"9693affd94a0d128dba810427dddff5bd4f326998176f52cc1211db7780529fc","impliedFormat":1},{"version":"703733dde084b7e856f5940f9c3c12007ca62858accb9482c2b65e030877702d","impliedFormat":1},{"version":"413cb597cc5933562ec064bfb1c3a9164ef5d2f09e5f6b7bd19f483d5352449e","impliedFormat":1},{"version":"68f81dad9e8d7b7aa15f35607a70c8b68798cf579ac44bd85325b8e2f1fb3600","impliedFormat":1},{"version":"1de80059b8078ea5749941c9f863aa970b4735bdbb003be4925c853a8b6b4450","impliedFormat":1},{"version":"1d079c37fa53e3c21ed3fa214a27507bda9991f2a41458705b19ed8c2b61173d","impliedFormat":1},{"version":"922bea60daff1f927afcf650f440bc1939f87f8f6710627d3143a0f721479f12","impliedFormat":1},{"version":"5835a6e0d7cd2738e56b671af0e561e7c1b4fb77751383672f4b009f4e161d70","impliedFormat":1},{"version":"c0eeaaa67c85c3bb6c52b629ebbfd3b2292dc67e8c0ffda2fc6cd2f78dc471e6","impliedFormat":1},{"version":"4b7f74b772140395e7af67c4841be1ab867c11b3b82a51b1aeb692822b76c872","impliedFormat":1},{"version":"2470a2412a59c6177cd4408dd7edb099ca7ace68c0187f54187dfee56dc9c5aa","impliedFormat":99},{"version":"c2008605e78208cfa9cd70bd29856b72dda7ad89df5dc895920f8e10bcb9cd0a","impliedFormat":99},{"version":"ec61ebac4d71c4698318673efbb5c481a6c4d374da8d285f6557541a5bd318d0","impliedFormat":99},{"version":"33ee52978ab913f5ebbc5ccd922ed9a11e76d5c6cee96ac39ce1336aad27e7c5","impliedFormat":99},{"version":"40d8b22be2580a18ad37c175080af0724ecbdf364e4cb433d7110f5b71d5f771","impliedFormat":1},{"version":"16fd66ae997b2f01c972531239da90fbf8ab4022bb145b9587ef746f6cecde5a","affectsGlobalScope":true,"impliedFormat":1},{"version":"fc8fbee8f73bf5ffd6ba08ba1c554d6f714c49cae5b5e984afd545ab1b7abe06","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce56c5016dbfedf8b7f985316890837998f684935b10b7212c7a32ce82b02a27","impliedFormat":1},{"version":"521fc35a732f1a19f5d52024c2c22e257aa63258554968f7806a823be2f82b03","impliedFormat":1},{"version":"b789bf89eb19c777ed1e956dbad0925ca795701552d22e68fd130a032008b9f9","impliedFormat":1},"9269d492817e359123ac64c8205e5d05dab63d71a3a7a229e68b5d9a0e8150bf","6cbc3ec884173f6d3da9632af23e045690ff5d653172d47a13d4197e2360b8f4","f5a69bd93e9042e79cb0e3919344730f995329ed3e89f935ffb649ade0dffbe5","0a5b1b37b0c89db485dab9ae99751c03d0204a981f09a200a77431a037f02c2c","7a50bfbfa241ff133ccd6544a24b1fd56d1c8299d86e5e92e811ba156800d873","4f1667ed05a87f607cab9274bd35973b82e5a98388a54d2e184b8f4eb1772b6c","a501aafae5c564984f5c9880496e2b756204311389ca83607c58e7cb5dbf4363",{"version":"ef73bcfef9907c8b772a30e5a64a6bd86a5669cba3d210fcdcc6b625e3312459","impliedFormat":1},{"version":"30ac06db9b6af5453925718fad5aef3f9fa8fa8356f19fd4937d30360615eac8","impliedFormat":1},{"version":"9f04a3005fc55f6ca1843e3e0ff2d1c70c85accdc54f865decca0916e4c50024","impliedFormat":1},{"version":"7d174edda64c43878daeacd832b7c9c922274858346ee7bc3d3ebc5133a4ce65","impliedFormat":1},{"version":"c2c4e36b74333f30eec973f09edbadd77339094f54b550b24a77f7ea13eb3afd","impliedFormat":1},{"version":"06ff821d1b8e8f91e0c357bd3a91935c379de1987af82658f4c983bdd79e5e29","impliedFormat":1},{"version":"2096dd30268ccc5173ff3b6bde2fded21f5c495331d4bf0340f06d9218a08b03","impliedFormat":1},{"version":"bd894069d6bfe248a8658bd1abbb0bc782efa5eae9ba838d2cc46e669a843664","impliedFormat":1},{"version":"2316112d41469d7fad96608b2584c235de540644fb83daccac230897a8ffccbf","impliedFormat":1},{"version":"3a2b832012c99669690ca696e4edd54b286afe88a740decd34ee0c4746e7f44d","impliedFormat":1},{"version":"546090a0f36f3782b41791a34cd8f93953a7c26ef06717e0234c4619f29bf7cc","impliedFormat":1},"1466dc4d0d71fa033586344ed80911ad5935accd75d02f0a307fb26dc2f85998","93a284cab6b0c8e12c136bf9eb5f4d52ff212107807da0e37ce6e5b98edab128","8ab0aa150170eca0c123f1402c66a0262190e5e5b0f35f849eff323586820127",{"version":"cdcc132f207d097d7d3aa75615ab9a2e71d6a478162dde8b67f88ea19f3e54de","impliedFormat":1},{"version":"0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2","impliedFormat":1},{"version":"c085e9aa62d1ae1375794c1fb927a445fa105fed891a7e24edbb1c3300f7384a","impliedFormat":1},{"version":"f315e1e65a1f80992f0509e84e4ae2df15ecd9ef73df975f7c98813b71e4c8da","impliedFormat":1},{"version":"5b9586e9b0b6322e5bfbd2c29bd3b8e21ab9d871f82346cb71020e3d84bae73e","impliedFormat":1},{"version":"3e70a7e67c2cb16f8cd49097360c0309fe9d1e3210ff9222e9dac1f8df9d4fb6","impliedFormat":1},{"version":"ab68d2a3e3e8767c3fba8f80de099a1cfc18c0de79e42cb02ae66e22dfe14a66","impliedFormat":1},{"version":"d96cc6598148bf1a98fb2e8dcf01c63a4b3558bdaec6ef35e087fd0562eb40ec","impliedFormat":1},{"version":"5b9586e9b0b6322e5bfbd2c29bd3b8e21ab9d871f82346cb71020e3d84bae73e","impliedFormat":1},{"version":"f8db4fea512ab759b2223b90ecbbe7dae919c02f8ce95ec03f7fb1cf757cfbeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"3f36c0c7508302f3dca3dc5ab0a66d822b2222f70c24bb1796ddb5c9d1168a05","impliedFormat":1},{"version":"b23d5b89c465872587e130f427b39458b8e3ad16385f98446e9e86151ba6eb15","affectsGlobalScope":true,"impliedFormat":1},{"version":"057342b5755b9ee9127751c09d15f2a4f9599448a7eed71d87ad77f1d3d801c7","affectsGlobalScope":true},{"version":"a26d74bc8768e134734fa049d5a89fb674a560292f4bf1b39392416dc04cf49e","impliedFormat":1},{"version":"ea7f3d87bb25b8cf26c1b440de31b628c53b5e72e8f1ab1726356bf58acf5946","impliedFormat":1},{"version":"7ec047b73f621c526468517fea779fec2007dd05baa880989def59126c98ef79","impliedFormat":1},{"version":"6b5f886fe41e2e767168e491fe6048398ed6439d44e006d9f51cc31265f08978","impliedFormat":1},{"version":"f4a1eba860f7493d19df42373ddde4f3c6f31aa574b608e55e5b2bd459bba587","impliedFormat":1},{"version":"6b863463764ae572b9ada405bf77aac37b5e5089a3ab420d0862e4471051393b","impliedFormat":1},{"version":"904d6ad970b6bd825449480488a73d9b98432357ab38cf8d31ffd651ae376ff5","impliedFormat":1},{"version":"233267a4a036c64aee95f66a0d31e3e0ef048cccc57dd66f9cf87582b38691e4","impliedFormat":1},{"version":"8dd450de6d756cee0761f277c6dc58b0b5a66b8c274b980949318b8cad26d712","impliedFormat":1},{"version":"ec69ebd1c4850514ebb6724911ad56e71caa0d076891ed6b67cb10d3ebbf2586","impliedFormat":1},{"version":"89783bd45ab35df55203b522f8271500189c3526976af533a599a86caaf31362","impliedFormat":1},{"version":"6da2e0928bdab05861abc4e4abebea0c7cf0b67e25374ba35a94df2269563dd8","impliedFormat":1},"97810d4fece92d18cf4b392537de9918c8c247df404a95ba2440929c16ac5c6f","8b8931ab47b395d39fc531865b67181433cb2d4d89a4de84d13439e770ef546a","93a284cab6b0c8e12c136bf9eb5f4d52ff212107807da0e37ce6e5b98edab128",{"version":"ae77d81a5541a8abb938a0efedf9ac4bea36fb3a24cc28cfa11c598863aba571","impliedFormat":1},{"version":"3cfb7c0c642b19fb75132154040bb7cd840f0002f9955b14154e69611b9b3f81","impliedFormat":1},{"version":"8387ec1601cf6b8948672537cf8d430431ba0d87b1f9537b4597c1ab8d3ade5b","impliedFormat":1},{"version":"d16f1c460b1ca9158e030fdf3641e1de11135e0c7169d3e8cf17cc4cc35d5e64","impliedFormat":1},{"version":"a934063af84f8117b8ce51851c1af2b76efe960aa4c7b48d0343a1b15c01aedf","impliedFormat":1},{"version":"e3c5ad476eb2fca8505aee5bdfdf9bf11760df5d0f9545db23f12a5c4d72a718","impliedFormat":1},{"version":"462bccdf75fcafc1ae8c30400c9425e1a4681db5d605d1a0edb4f990a54d8094","impliedFormat":1},{"version":"5923d8facbac6ecf7c84739a5c701a57af94a6f6648d6229a6c768cf28f0f8cb","impliedFormat":1},{"version":"d0570ce419fb38287e7b39c910b468becb5b2278cf33b1000a3d3e82a46ecae2","impliedFormat":1},{"version":"3aca7f4260dad9dcc0a0333654cb3cde6664d34a553ec06c953bce11151764d7","impliedFormat":1},{"version":"a0a6f0095f25f08a7129bc4d7cb8438039ec422dc341218d274e1e5131115988","impliedFormat":1},{"version":"1d2699a343a347a830be26eb17ab340d7875c6f549c8d7477efb1773060cc7e5","impliedFormat":1},{"version":"45785e608b3d380c79e21957a6d1467e1206ac0281644e43e8ed6498808ace72","impliedFormat":1},{"version":"bece27602416508ba946868ad34d09997911016dbd6893fb884633017f74e2c5","impliedFormat":1},{"version":"2a90177ebaef25de89351de964c2c601ab54d6e3a157cba60d9cd3eaf5a5ee1a","impliedFormat":1},{"version":"82200e963d3c767976a5a9f41ecf8c65eca14a6b33dcbe00214fcbe959698c46","impliedFormat":1},{"version":"b4966c503c08bbd9e834037a8ab60e5f53c5fd1092e8873c4a1c344806acdab2","impliedFormat":1},{"version":"b598deb1da203a2b58c76cf8d91cfc2ca172d785dacd8466c0a11e400ff6ab2d","impliedFormat":1},{"version":"f3ded47c50efa3fbc7105c933490fa0cf48df063248a5b27bca5849d5d126f9b","impliedFormat":1},{"version":"5a28b18716ba6f312b195f494c2916849af2b820c6ddd8d63f00688e5d4ec3fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"6ba12bba20655139f904416f2ed135cc639ce9a22d985f22b368f63dde1285a4","impliedFormat":1},{"version":"42c169fb8c2d42f4f668c624a9a11e719d5d07dacbebb63cbcf7ef365b0a75b3","impliedFormat":1},{"version":"a80b7bc4eda856374c26a56f6f25297f4c393309d4c4548002a5238cd57b2b66","impliedFormat":1},{"version":"2fbe402f0ee5aa8ab55367f88030f79d46211c0a0f342becaa9f648bf8534e9d","impliedFormat":1},{"version":"b94258ef37e67474ac5522e9c519489a55dcb3d4a8f645e335fc68ea2215fe88","impliedFormat":1},"4dc29cec75e1552d677f54756f5fd112a802d57ff3475a902dd0ce7849c9c255","7b1472fdc4611f5930120f7987ff3ba89bb0e923086ce08e7feb3cf032a6b6ea","96bf5f9d1fa1a4cf19c9a178a8715e2ece999f3b436db8a0bb9bb456770e4138","d190d3ece6cfa01cad4a671a2d10c4419f211ef775d4bdb3dd0b10a1b5b47896","e31fadf9119d7f541e08fe2ebfb2703244156108ee98f35ea51ca211fae1ca9f","44bb47032a2a8afcb2c480a7074ca3e960bbd1f959752722b127023c544f9241","87a12149e8657277e5e796f349b92715507f2adaa26f0613d624079e23c0b2f7","d93cba920e76e2fc09b8832f070b061a8378a15531518c1ddc6363db4d25e16b","ddaf729eb0a5943c64ef3582405544dfbd8f7b2c12dc19c6b1bbc6187a8eaf5c","44092e0f942fc3de820351e5df06f0a61248607cd0bdd62daeb93be75071ce52",{"version":"fe93c474ab38ac02e30e3af073412b4f92b740152cf3a751fdaee8cbea982341","impliedFormat":1},{"version":"685ac382e8abff1fb8b8e9379be780a39608bda4909c5153e6ee46fce4dd5abd","impliedFormat":1},{"version":"1e00b8bf9e3766c958218cd6144ffe08418286f89ff44ba5a2cc830c03dd22c7","impliedFormat":1},"2badb5f4a9402e2fbeea9384ba92c9cf25319cec0f444026e75c5dd538a81d49","773f048da0a50e39626638fe85c60ee8400b7c5590aa2497042e8f22cf2323ba","f21e5cbc59c1208219c859168762e5325a97385a1761746fed6949350286b131","b782f0cd5018ba33a1058e2bf917e458f4241e2b9983d3d7763e41444354d86b",{"version":"b40c82d5fe5f17bc9bdf7fd460e032e175f82aa5698571ccfe6edeb23281ad0c","impliedFormat":99},"df36668ff877257a4d26a2a0b30f1cc2b4b65bc38853fcc57ef42d18bc5190f6","e79a0bce6ccc9743ad3c95835f348fdcb972ef7141873910b9663e2fa785426e","89a09be69e89e88b9800aca2447c6eb5413f5945f6312235f3ae6b669b683d6b","2a3b4b012372acd4e2c2142b1d9dbc46134f0150993cbcd49bf89ed5f4b39908","8a7ca6a45d99e1a5ace53a1095f43af5ed2e9f5f1e49d951d4cb150388c566b3","722727c8a2c98bc056e56be01f7b37e43bff9744c768fa380e47950e8b52cf1a","a1970b4a84a99a8b9b568bb45cad847ecff42c45897c6ca349461247e85e679c","f5eacd04b6f836a13c005d5bf989396a46ef03df8a85254366f4edfaff652c34","f7058714bfded58e5c8655b3d1bb7c4b091f7a3457706bbb8308d9f37808dd2a","5f57f455cd780bd059076c402ceb920fad5b831675159070a6696b83e76c06be","5c62fd638339fc95b8609b9b9380f191e4f91eb224499bf8b6136ebeff70d34e","afb6333d814a101e4bf730ce59373c7c349fecfe9fec038e2d96dd51f703faa0","f258457ec1ed908bbeb43ec8f627ca24547e5caa2db7398cf11c4c257d5260d7",{"version":"71acd198e19fa38447a3cbc5c33f2f5a719d933fccf314aaff0e8b0593271324","impliedFormat":1},"2b1567ab09b9a0bbb6f82b06c4fc5201273c5c42d7f1acffd3be1caf0e7ea908","0643920db2d228f09764ffbc83dc872433bef96300fe321ac154f5620bb88da3","bd7dae5abe5f70b0c0f0890ee92c89dd3ccbb21b3f35246732096e510fbd397c","163751de3097384fc251f31224e6fcd0c43e6a90ab9b05a4356b238bf3244101","11ac503798bb1481262c4acfb7b93135a589889017e65a42de85a72450c82cb6","f1d1d74c975a601e1e70bbb094060557bbc25c53ca397f98c05fec807336eee0","65017205b096e3b3f6fb897ead87dfc587caf516f59ec05007315c5589ab59bb","041f43f811529bb7ada93cdfbc1156187292051ae093d76daf23142d0c4e85f1","5d63ec30ab3bd7c2c036c5c8db2e986808f012c7a8a0d8bf146b21a152198852",{"version":"03f1d83d61696326ea29c8a1c15cbaccf61e92598d53f2ccae06078531f42448","impliedFormat":1},{"version":"2c8e55457aaf4902941dfdba4061935922e8ee6e120539c9801cd7b400fae050","impliedFormat":1},{"version":"3a9313fe5ace558b8b18e85f931da10b259e738775f411c061e5f15787b138eb","impliedFormat":1},{"version":"670a76db379b27c8ff42f1ba927828a22862e2ab0b0908e38b671f0e912cc5ed","impliedFormat":1},{"version":"9e0cf651e8e2c5b9bebbabdff2f7c6f8cedd91b1d9afcc0a854cdff053a88f1b","impliedFormat":1},{"version":"069bebfee29864e3955378107e243508b163e77ab10de6a5ee03ae06939f0bb9","impliedFormat":1},{"version":"1748c03e7a7d118f7f6648c709507971eb0d416f489958492c5ae625de445184","impliedFormat":1},{"version":"afe73051ff6a03a9565cbd8ebb0e956ee3df5e913ad5c1ded64218aabfa3dcb5","impliedFormat":1},{"version":"035a5df183489c2e22f3cf59fc1ed2b043d27f357eecc0eb8d8e840059d44245","impliedFormat":1},{"version":"a4809f4d92317535e6b22b01019437030077a76fec1d93b9881c9ed4738fcc54","impliedFormat":1},{"version":"5f53fa0bd22096d2a78533f94e02c899143b8f0f9891a46965294ee8b91a9434","impliedFormat":1},{"version":"19990350fca066265b2c190c9b6cde1229f35002ea2d4df8c9e397e9942f6c89","impliedFormat":99},{"version":"8fb8fdda477cd7382477ffda92c2bb7d9f7ef583b1aa531eb6b2dc2f0a206c10","impliedFormat":99},{"version":"66995b0c991b5c5d42eff1d950733f85482c7419f7296ab8952e03718169e379","impliedFormat":99},{"version":"9863f888da357e35e013ca3465b794a490a198226bd8232c2f81fb44e16ff323","impliedFormat":99},{"version":"3ee468ba409b231f05d8120a257d8fd52f81db173cfd55d2d38825d4a9e0d4d8","impliedFormat":1},{"version":"3ee468ba409b231f05d8120a257d8fd52f81db173cfd55d2d38825d4a9e0d4d8","impliedFormat":1},{"version":"8eda1b176639dc7e6dfb326bd10532e2de9e18c4f100ed9f3d0753b04e2c9f53","impliedFormat":1},{"version":"e61235deb17d4d200b1aebd5e1b78a9f7f03108d3fe73c522476de89f2169d88","impliedFormat":1},{"version":"fa292ea8941a603dc795593c5811d9b865b96e560f99dcfcec94705d5264296d","impliedFormat":99},{"version":"db085d2171d48938a99e851dafe0e486dce9859e5dfa73c21de5ed3d4d6fb0c5","impliedFormat":99},{"version":"fb741132c87a219532b69832d9389ed13db734b436ad3d0d62d722de86321869","impliedFormat":99},{"version":"a77be6fc44c876bc10c897107f84eaba10790913ebdcad40fcda7e47469b2160","impliedFormat":99},{"version":"0b098b627c5198819456b7466aef8253f562a6a64d66810804cfad6ff36204c6","impliedFormat":99},{"version":"91f5dbcdb25d145a56cffe957ec665256827892d779ef108eb2f3864faff523b","impliedFormat":99},{"version":"052ba354bab8fb943e0bc05a0769f7b81d7c3b3c6cd0f5cfa53c7b2da2a525c5","impliedFormat":99},{"version":"927955a3de5857e0a1c575ced5a4245e74e6821d720ed213141347dd1870197f","impliedFormat":99},{"version":"fec804d54cd97dd77e956232fc37dc13f53e160d4bbeeb5489e86eeaa91f7ebd","impliedFormat":99},{"version":"03c258e060b7da220973f84b89615e4e9850e9b5d30b3a8e4840b3e3268ae8eb","impliedFormat":1},{"version":"fd0589ca571ad090b531d8c095e26caa53d4825c64d3ff2b2b1ab95d72294175","impliedFormat":1},{"version":"669843ecafb89ae1e944df06360e8966219e4c1c34c0d28aa2503272cdd444a7","affectsGlobalScope":true,"impliedFormat":1},{"version":"96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","impliedFormat":1},{"version":"ab82804a14454734010dcdcd43f564ff7b0389bee4c5692eec76ff5b30d4cf66","impliedFormat":1},{"version":"1f4ae755492a669b317903a6b1664cb7af3fe0c3d1eec6447f4e95a80616d15a","impliedFormat":1},{"version":"bae8d023ef6b23df7da26f51cea44321f95817c190342a36882e93b80d07a960","impliedFormat":1},{"version":"26a770cec4bd2e7dbba95c6e536390fffe83c6268b78974a93727903b515c4e7","impliedFormat":1}],"root":[[327,333],[345,347],360,[373,375],[401,410],[414,417],[419,431],[433,441]],"options":{"allowJs":true,"downlevelIteration":true,"esModuleInterop":true,"jsx":1,"module":99,"skipLibCheck":true,"strict":true,"target":1},"referencedMap":[[436,1],[437,2],[438,3],[439,4],[440,5],[434,6],[441,7],[435,8],[331,3],[403,9],[407,10],[408,11],[421,12],[422,13],[330,14],[409,15],[423,16],[424,17],[425,18],[426,15],[410,12],[415,19],[427,20],[417,21],[420,22],[402,23],[406,24],[429,25],[414,26],[430,27],[401,28],[428,29],[431,30],[416,31],[404,32],[433,33],[405,34],[419,35],[332,36],[333,37],[328,38],[329,12],[345,39],[327,40],[444,41],[442,12],[348,12],[351,42],[270,12],[364,43],[372,44],[361,36],[363,43],[369,43],[432,43],[371,45],[366,46],[367,43],[362,36],[370,47],[398,48],[368,49],[365,12],[350,12],[390,12],[387,12],[386,12],[381,50],[392,51],[377,52],[388,53],[380,54],[379,55],[389,12],[384,56],[391,12],[385,57],[378,12],[394,58],[376,12],[447,59],[443,41],[445,60],[446,41],[448,12],[449,61],[450,12],[451,62],[452,63],[357,64],[356,65],[471,66],[472,67],[473,12],[134,68],[135,68],[136,69],[95,70],[137,71],[138,72],[139,73],[90,12],[93,74],[91,12],[92,12],[140,75],[141,76],[142,77],[143,78],[144,79],[145,80],[146,80],[148,81],[147,82],[149,83],[150,84],[151,85],[133,86],[94,12],[152,87],[153,88],[154,89],[186,90],[155,91],[156,92],[157,93],[158,94],[159,95],[160,96],[161,97],[162,98],[163,99],[164,100],[165,100],[166,101],[167,12],[168,102],[170,103],[169,104],[171,105],[172,106],[173,107],[174,108],[175,109],[176,110],[177,111],[178,112],[179,113],[180,114],[181,115],[182,116],[183,117],[184,118],[185,119],[82,12],[191,120],[192,121],[190,36],[393,122],[188,123],[189,124],[80,12],[83,125],[397,36],[474,12],[475,12],[359,126],[358,12],[470,12],[476,12],[477,127],[349,12],[400,128],[399,129],[334,12],[81,12],[460,130],[459,12],[457,12],[458,12],[355,131],[395,36],[353,132],[352,65],[354,133],[396,36],[89,134],[282,135],[286,136],[288,137],[213,138],[217,139],[214,140],[241,141],[215,142],[245,141],[233,141],[197,141],[202,12],[221,12],[310,143],[305,12],[304,144],[307,145],[308,146],[222,147],[298,148],[301,149],[275,150],[274,151],[273,152],[313,36],[272,153],[227,12],[316,12],[412,154],[411,12],[318,12],[320,155],[317,36],[319,156],[193,12],[195,157],[261,12],[262,12],[264,12],[267,158],[263,12],[265,159],[266,159],[216,12],[281,153],[289,160],[293,161],[206,162],[306,163],[205,164],[238,165],[255,166],[198,167],[204,168],[194,169],[259,170],[258,171],[240,12],[225,172],[254,173],[253,12],[247,174],[248,175],[200,176],[199,12],[252,177],[251,178],[250,179],[249,180],[201,181],[242,181],[187,12],[256,182],[220,183],[243,184],[257,185],[260,186],[207,12],[212,12],[209,12],[210,12],[211,12],[223,12],[224,187],[246,188],[203,189],[208,12],[219,190],[218,191],[235,192],[234,193],[226,194],[228,195],[230,196],[321,197],[229,198],[231,199],[284,12],[285,12],[283,12],[315,12],[232,200],[88,12],[309,201],[276,12],[279,202],[291,36],[297,203],[295,36],[269,204],[196,12],[299,205],[271,12],[278,12],[277,206],[244,207],[239,208],[237,209],[236,12],[287,12],[303,36],[280,210],[79,12],[87,211],[84,36],[85,12],[86,12],[290,212],[292,213],[294,214],[413,215],[296,216],[326,217],[300,217],[325,218],[302,219],[311,220],[312,221],[314,222],[322,223],[324,12],[323,224],[268,225],[455,226],[468,227],[453,12],[454,228],[469,229],[464,230],[465,231],[463,232],[467,233],[461,234],[456,235],[466,236],[462,227],[383,237],[382,12],[418,12],[344,238],[337,239],[339,240],[340,239],[341,241],[342,241],[335,12],[343,242],[336,12],[338,12],[77,12],[78,12],[13,12],[14,12],[16,12],[15,12],[2,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[24,12],[3,12],[25,12],[26,12],[4,12],[27,12],[31,12],[28,12],[29,12],[30,12],[32,12],[33,12],[34,12],[5,12],[35,12],[36,12],[37,12],[38,12],[6,12],[42,12],[39,12],[40,12],[41,12],[43,12],[7,12],[44,12],[49,12],[50,12],[45,12],[46,12],[47,12],[48,12],[8,12],[54,12],[51,12],[52,12],[53,12],[55,12],[9,12],[56,12],[57,12],[58,12],[60,12],[59,12],[61,12],[62,12],[10,12],[63,12],[64,12],[65,12],[11,12],[66,12],[67,12],[68,12],[69,12],[70,12],[1,12],[71,12],[72,12],[12,12],[75,12],[74,12],[73,12],[76,12],[111,243],[121,244],[110,243],[131,245],[102,246],[101,247],[130,224],[124,248],[129,249],[104,250],[118,251],[103,252],[127,253],[99,254],[98,224],[128,255],[100,256],[105,257],[106,12],[109,257],[96,12],[132,258],[122,259],[113,260],[114,261],[116,262],[112,263],[115,264],[125,224],[107,265],[108,266],[117,267],[97,268],[120,259],[119,257],[123,12],[126,269],[346,12],[347,12],[360,270],[373,271],[374,272],[375,12]],"affectedFilesPendingEmit":[436,437,438,439,440,434,441,435,331,403,407,408,421,422,330,409,423,424,425,426,410,415,427,417,420,402,406,429,414,430,401,428,431,416,404,433,405,419,332,333,328,329,345,346,347,375],"version":"5.7.2"}
